
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Article
 * 
 */
export type Article = $Result.DefaultSelection<Prisma.$ArticlePayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model BonDeCommandeCategory
 * 
 */
export type BonDeCommandeCategory = $Result.DefaultSelection<Prisma.$BonDeCommandeCategoryPayload>
/**
 * Model BonDeCommande
 * 
 */
export type BonDeCommande = $Result.DefaultSelection<Prisma.$BonDeCommandePayload>
/**
 * Model Employee
 * 
 */
export type Employee = $Result.DefaultSelection<Prisma.$EmployeePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model GerantEmployeeAssignment
 * 
 */
export type GerantEmployeeAssignment = $Result.DefaultSelection<Prisma.$GerantEmployeeAssignmentPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Articles
 * const articles = await prisma.article.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Articles
   * const articles = await prisma.article.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.article`: Exposes CRUD operations for the **Article** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Articles
    * const articles = await prisma.article.findMany()
    * ```
    */
  get article(): Prisma.ArticleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bonDeCommandeCategory`: Exposes CRUD operations for the **BonDeCommandeCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BonDeCommandeCategories
    * const bonDeCommandeCategories = await prisma.bonDeCommandeCategory.findMany()
    * ```
    */
  get bonDeCommandeCategory(): Prisma.BonDeCommandeCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bonDeCommande`: Exposes CRUD operations for the **BonDeCommande** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BonDeCommandes
    * const bonDeCommandes = await prisma.bonDeCommande.findMany()
    * ```
    */
  get bonDeCommande(): Prisma.BonDeCommandeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.EmployeeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gerantEmployeeAssignment`: Exposes CRUD operations for the **GerantEmployeeAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GerantEmployeeAssignments
    * const gerantEmployeeAssignments = await prisma.gerantEmployeeAssignment.findMany()
    * ```
    */
  get gerantEmployeeAssignment(): Prisma.GerantEmployeeAssignmentDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Article: 'Article',
    Category: 'Category',
    BonDeCommandeCategory: 'BonDeCommandeCategory',
    BonDeCommande: 'BonDeCommande',
    Employee: 'Employee',
    User: 'User',
    Role: 'Role',
    Admin: 'Admin',
    GerantEmployeeAssignment: 'GerantEmployeeAssignment'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "article" | "category" | "bonDeCommandeCategory" | "bonDeCommande" | "employee" | "user" | "role" | "admin" | "gerantEmployeeAssignment"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Article: {
        payload: Prisma.$ArticlePayload<ExtArgs>
        fields: Prisma.ArticleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArticleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArticleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          findFirst: {
            args: Prisma.ArticleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArticleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          findMany: {
            args: Prisma.ArticleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>[]
          }
          create: {
            args: Prisma.ArticleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          createMany: {
            args: Prisma.ArticleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ArticleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          update: {
            args: Prisma.ArticleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          deleteMany: {
            args: Prisma.ArticleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArticleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ArticleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          aggregate: {
            args: Prisma.ArticleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArticle>
          }
          groupBy: {
            args: Prisma.ArticleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArticleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArticleCountArgs<ExtArgs>
            result: $Utils.Optional<ArticleCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      BonDeCommandeCategory: {
        payload: Prisma.$BonDeCommandeCategoryPayload<ExtArgs>
        fields: Prisma.BonDeCommandeCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BonDeCommandeCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonDeCommandeCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BonDeCommandeCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonDeCommandeCategoryPayload>
          }
          findFirst: {
            args: Prisma.BonDeCommandeCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonDeCommandeCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BonDeCommandeCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonDeCommandeCategoryPayload>
          }
          findMany: {
            args: Prisma.BonDeCommandeCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonDeCommandeCategoryPayload>[]
          }
          create: {
            args: Prisma.BonDeCommandeCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonDeCommandeCategoryPayload>
          }
          createMany: {
            args: Prisma.BonDeCommandeCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BonDeCommandeCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonDeCommandeCategoryPayload>
          }
          update: {
            args: Prisma.BonDeCommandeCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonDeCommandeCategoryPayload>
          }
          deleteMany: {
            args: Prisma.BonDeCommandeCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BonDeCommandeCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BonDeCommandeCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonDeCommandeCategoryPayload>
          }
          aggregate: {
            args: Prisma.BonDeCommandeCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBonDeCommandeCategory>
          }
          groupBy: {
            args: Prisma.BonDeCommandeCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<BonDeCommandeCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.BonDeCommandeCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<BonDeCommandeCategoryCountAggregateOutputType> | number
          }
        }
      }
      BonDeCommande: {
        payload: Prisma.$BonDeCommandePayload<ExtArgs>
        fields: Prisma.BonDeCommandeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BonDeCommandeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonDeCommandePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BonDeCommandeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonDeCommandePayload>
          }
          findFirst: {
            args: Prisma.BonDeCommandeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonDeCommandePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BonDeCommandeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonDeCommandePayload>
          }
          findMany: {
            args: Prisma.BonDeCommandeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonDeCommandePayload>[]
          }
          create: {
            args: Prisma.BonDeCommandeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonDeCommandePayload>
          }
          createMany: {
            args: Prisma.BonDeCommandeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BonDeCommandeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonDeCommandePayload>
          }
          update: {
            args: Prisma.BonDeCommandeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonDeCommandePayload>
          }
          deleteMany: {
            args: Prisma.BonDeCommandeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BonDeCommandeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BonDeCommandeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonDeCommandePayload>
          }
          aggregate: {
            args: Prisma.BonDeCommandeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBonDeCommande>
          }
          groupBy: {
            args: Prisma.BonDeCommandeGroupByArgs<ExtArgs>
            result: $Utils.Optional<BonDeCommandeGroupByOutputType>[]
          }
          count: {
            args: Prisma.BonDeCommandeCountArgs<ExtArgs>
            result: $Utils.Optional<BonDeCommandeCountAggregateOutputType> | number
          }
        }
      }
      Employee: {
        payload: Prisma.$EmployeePayload<ExtArgs>
        fields: Prisma.EmployeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findFirst: {
            args: Prisma.EmployeeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findMany: {
            args: Prisma.EmployeeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          create: {
            args: Prisma.EmployeeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          createMany: {
            args: Prisma.EmployeeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EmployeeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          update: {
            args: Prisma.EmployeeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          deleteMany: {
            args: Prisma.EmployeeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmployeeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          aggregate: {
            args: Prisma.EmployeeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployee>
          }
          groupBy: {
            args: Prisma.EmployeeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      GerantEmployeeAssignment: {
        payload: Prisma.$GerantEmployeeAssignmentPayload<ExtArgs>
        fields: Prisma.GerantEmployeeAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GerantEmployeeAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GerantEmployeeAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GerantEmployeeAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GerantEmployeeAssignmentPayload>
          }
          findFirst: {
            args: Prisma.GerantEmployeeAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GerantEmployeeAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GerantEmployeeAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GerantEmployeeAssignmentPayload>
          }
          findMany: {
            args: Prisma.GerantEmployeeAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GerantEmployeeAssignmentPayload>[]
          }
          create: {
            args: Prisma.GerantEmployeeAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GerantEmployeeAssignmentPayload>
          }
          createMany: {
            args: Prisma.GerantEmployeeAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GerantEmployeeAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GerantEmployeeAssignmentPayload>
          }
          update: {
            args: Prisma.GerantEmployeeAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GerantEmployeeAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.GerantEmployeeAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GerantEmployeeAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GerantEmployeeAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GerantEmployeeAssignmentPayload>
          }
          aggregate: {
            args: Prisma.GerantEmployeeAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGerantEmployeeAssignment>
          }
          groupBy: {
            args: Prisma.GerantEmployeeAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<GerantEmployeeAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.GerantEmployeeAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<GerantEmployeeAssignmentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    article?: ArticleOmit
    category?: CategoryOmit
    bonDeCommandeCategory?: BonDeCommandeCategoryOmit
    bonDeCommande?: BonDeCommandeOmit
    employee?: EmployeeOmit
    user?: UserOmit
    role?: RoleOmit
    admin?: AdminOmit
    gerantEmployeeAssignment?: GerantEmployeeAssignmentOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ArticleCountOutputType
   */

  export type ArticleCountOutputType = {
    bon_de_commande_categories: number
  }

  export type ArticleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bon_de_commande_categories?: boolean | ArticleCountOutputTypeCountBon_de_commande_categoriesArgs
  }

  // Custom InputTypes
  /**
   * ArticleCountOutputType without action
   */
  export type ArticleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleCountOutputType
     */
    select?: ArticleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ArticleCountOutputType without action
   */
  export type ArticleCountOutputTypeCountBon_de_commande_categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BonDeCommandeCategoryWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    articles: number
    commandes: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    articles?: boolean | CategoryCountOutputTypeCountArticlesArgs
    commandes?: boolean | CategoryCountOutputTypeCountCommandesArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountArticlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArticleWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountCommandesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BonDeCommandeCategoryWhereInput
  }


  /**
   * Count Type BonDeCommandeCountOutputType
   */

  export type BonDeCommandeCountOutputType = {
    categories: number
  }

  export type BonDeCommandeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | BonDeCommandeCountOutputTypeCountCategoriesArgs
  }

  // Custom InputTypes
  /**
   * BonDeCommandeCountOutputType without action
   */
  export type BonDeCommandeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommandeCountOutputType
     */
    select?: BonDeCommandeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BonDeCommandeCountOutputType without action
   */
  export type BonDeCommandeCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BonDeCommandeCategoryWhereInput
  }


  /**
   * Count Type EmployeeCountOutputType
   */

  export type EmployeeCountOutputType = {
    bons_de_commande: number
    gerant_assignments: number
  }

  export type EmployeeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bons_de_commande?: boolean | EmployeeCountOutputTypeCountBons_de_commandeArgs
    gerant_assignments?: boolean | EmployeeCountOutputTypeCountGerant_assignmentsArgs
  }

  // Custom InputTypes
  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCountOutputType
     */
    select?: EmployeeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountBons_de_commandeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BonDeCommandeWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountGerant_assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GerantEmployeeAssignmentWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    gerant_assignments: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gerant_assignments?: boolean | UserCountOutputTypeCountGerant_assignmentsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGerant_assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GerantEmployeeAssignmentWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    users: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | RoleCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Article
   */

  export type AggregateArticle = {
    _count: ArticleCountAggregateOutputType | null
    _avg: ArticleAvgAggregateOutputType | null
    _sum: ArticleSumAggregateOutputType | null
    _min: ArticleMinAggregateOutputType | null
    _max: ArticleMaxAggregateOutputType | null
  }

  export type ArticleAvgAggregateOutputType = {
    price: Decimal | null
    numero: number | null
    quantite_a_demander: Decimal | null
    quantite_a_stocker: Decimal | null
  }

  export type ArticleSumAggregateOutputType = {
    price: Decimal | null
    numero: number | null
    quantite_a_demander: Decimal | null
    quantite_a_stocker: Decimal | null
  }

  export type ArticleMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    price: Decimal | null
    category_id: string | null
    collisage: string | null
    type: string | null
    numero: number | null
    quantite_a_demander: Decimal | null
    quantite_a_stocker: Decimal | null
  }

  export type ArticleMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    price: Decimal | null
    category_id: string | null
    collisage: string | null
    type: string | null
    numero: number | null
    quantite_a_demander: Decimal | null
    quantite_a_stocker: Decimal | null
  }

  export type ArticleCountAggregateOutputType = {
    id: number
    name: number
    description: number
    price: number
    category_id: number
    collisage: number
    type: number
    numero: number
    quantite_a_demander: number
    quantite_a_stocker: number
    _all: number
  }


  export type ArticleAvgAggregateInputType = {
    price?: true
    numero?: true
    quantite_a_demander?: true
    quantite_a_stocker?: true
  }

  export type ArticleSumAggregateInputType = {
    price?: true
    numero?: true
    quantite_a_demander?: true
    quantite_a_stocker?: true
  }

  export type ArticleMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    category_id?: true
    collisage?: true
    type?: true
    numero?: true
    quantite_a_demander?: true
    quantite_a_stocker?: true
  }

  export type ArticleMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    category_id?: true
    collisage?: true
    type?: true
    numero?: true
    quantite_a_demander?: true
    quantite_a_stocker?: true
  }

  export type ArticleCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    category_id?: true
    collisage?: true
    type?: true
    numero?: true
    quantite_a_demander?: true
    quantite_a_stocker?: true
    _all?: true
  }

  export type ArticleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Article to aggregate.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: ArticleOrderByWithRelationInput | ArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Articles
    **/
    _count?: true | ArticleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArticleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArticleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArticleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArticleMaxAggregateInputType
  }

  export type GetArticleAggregateType<T extends ArticleAggregateArgs> = {
        [P in keyof T & keyof AggregateArticle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArticle[P]>
      : GetScalarType<T[P], AggregateArticle[P]>
  }




  export type ArticleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArticleWhereInput
    orderBy?: ArticleOrderByWithAggregationInput | ArticleOrderByWithAggregationInput[]
    by: ArticleScalarFieldEnum[] | ArticleScalarFieldEnum
    having?: ArticleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArticleCountAggregateInputType | true
    _avg?: ArticleAvgAggregateInputType
    _sum?: ArticleSumAggregateInputType
    _min?: ArticleMinAggregateInputType
    _max?: ArticleMaxAggregateInputType
  }

  export type ArticleGroupByOutputType = {
    id: string
    name: string
    description: string | null
    price: Decimal | null
    category_id: string
    collisage: string
    type: string
    numero: number | null
    quantite_a_demander: Decimal | null
    quantite_a_stocker: Decimal | null
    _count: ArticleCountAggregateOutputType | null
    _avg: ArticleAvgAggregateOutputType | null
    _sum: ArticleSumAggregateOutputType | null
    _min: ArticleMinAggregateOutputType | null
    _max: ArticleMaxAggregateOutputType | null
  }

  type GetArticleGroupByPayload<T extends ArticleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArticleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArticleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArticleGroupByOutputType[P]>
            : GetScalarType<T[P], ArticleGroupByOutputType[P]>
        }
      >
    >


  export type ArticleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    category_id?: boolean
    collisage?: boolean
    type?: boolean
    numero?: boolean
    quantite_a_demander?: boolean
    quantite_a_stocker?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    bon_de_commande_categories?: boolean | Article$bon_de_commande_categoriesArgs<ExtArgs>
    _count?: boolean | ArticleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["article"]>



  export type ArticleSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    category_id?: boolean
    collisage?: boolean
    type?: boolean
    numero?: boolean
    quantite_a_demander?: boolean
    quantite_a_stocker?: boolean
  }

  export type ArticleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "price" | "category_id" | "collisage" | "type" | "numero" | "quantite_a_demander" | "quantite_a_stocker", ExtArgs["result"]["article"]>
  export type ArticleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    bon_de_commande_categories?: boolean | Article$bon_de_commande_categoriesArgs<ExtArgs>
    _count?: boolean | ArticleCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ArticlePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Article"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>
      bon_de_commande_categories: Prisma.$BonDeCommandeCategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      price: Prisma.Decimal | null
      category_id: string
      collisage: string
      type: string
      numero: number | null
      quantite_a_demander: Prisma.Decimal | null
      quantite_a_stocker: Prisma.Decimal | null
    }, ExtArgs["result"]["article"]>
    composites: {}
  }

  type ArticleGetPayload<S extends boolean | null | undefined | ArticleDefaultArgs> = $Result.GetResult<Prisma.$ArticlePayload, S>

  type ArticleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ArticleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ArticleCountAggregateInputType | true
    }

  export interface ArticleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Article'], meta: { name: 'Article' } }
    /**
     * Find zero or one Article that matches the filter.
     * @param {ArticleFindUniqueArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArticleFindUniqueArgs>(args: SelectSubset<T, ArticleFindUniqueArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Article that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ArticleFindUniqueOrThrowArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArticleFindUniqueOrThrowArgs>(args: SelectSubset<T, ArticleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Article that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindFirstArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArticleFindFirstArgs>(args?: SelectSubset<T, ArticleFindFirstArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Article that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindFirstOrThrowArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArticleFindFirstOrThrowArgs>(args?: SelectSubset<T, ArticleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Articles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Articles
     * const articles = await prisma.article.findMany()
     * 
     * // Get first 10 Articles
     * const articles = await prisma.article.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const articleWithIdOnly = await prisma.article.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ArticleFindManyArgs>(args?: SelectSubset<T, ArticleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Article.
     * @param {ArticleCreateArgs} args - Arguments to create a Article.
     * @example
     * // Create one Article
     * const Article = await prisma.article.create({
     *   data: {
     *     // ... data to create a Article
     *   }
     * })
     * 
     */
    create<T extends ArticleCreateArgs>(args: SelectSubset<T, ArticleCreateArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Articles.
     * @param {ArticleCreateManyArgs} args - Arguments to create many Articles.
     * @example
     * // Create many Articles
     * const article = await prisma.article.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArticleCreateManyArgs>(args?: SelectSubset<T, ArticleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Article.
     * @param {ArticleDeleteArgs} args - Arguments to delete one Article.
     * @example
     * // Delete one Article
     * const Article = await prisma.article.delete({
     *   where: {
     *     // ... filter to delete one Article
     *   }
     * })
     * 
     */
    delete<T extends ArticleDeleteArgs>(args: SelectSubset<T, ArticleDeleteArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Article.
     * @param {ArticleUpdateArgs} args - Arguments to update one Article.
     * @example
     * // Update one Article
     * const article = await prisma.article.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArticleUpdateArgs>(args: SelectSubset<T, ArticleUpdateArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Articles.
     * @param {ArticleDeleteManyArgs} args - Arguments to filter Articles to delete.
     * @example
     * // Delete a few Articles
     * const { count } = await prisma.article.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArticleDeleteManyArgs>(args?: SelectSubset<T, ArticleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Articles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Articles
     * const article = await prisma.article.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArticleUpdateManyArgs>(args: SelectSubset<T, ArticleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Article.
     * @param {ArticleUpsertArgs} args - Arguments to update or create a Article.
     * @example
     * // Update or create a Article
     * const article = await prisma.article.upsert({
     *   create: {
     *     // ... data to create a Article
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Article we want to update
     *   }
     * })
     */
    upsert<T extends ArticleUpsertArgs>(args: SelectSubset<T, ArticleUpsertArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Articles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleCountArgs} args - Arguments to filter Articles to count.
     * @example
     * // Count the number of Articles
     * const count = await prisma.article.count({
     *   where: {
     *     // ... the filter for the Articles we want to count
     *   }
     * })
    **/
    count<T extends ArticleCountArgs>(
      args?: Subset<T, ArticleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArticleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Article.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArticleAggregateArgs>(args: Subset<T, ArticleAggregateArgs>): Prisma.PrismaPromise<GetArticleAggregateType<T>>

    /**
     * Group by Article.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArticleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArticleGroupByArgs['orderBy'] }
        : { orderBy?: ArticleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArticleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArticleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Article model
   */
  readonly fields: ArticleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Article.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArticleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    bon_de_commande_categories<T extends Article$bon_de_commande_categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Article$bon_de_commande_categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BonDeCommandeCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Article model
   */
  interface ArticleFieldRefs {
    readonly id: FieldRef<"Article", 'String'>
    readonly name: FieldRef<"Article", 'String'>
    readonly description: FieldRef<"Article", 'String'>
    readonly price: FieldRef<"Article", 'Decimal'>
    readonly category_id: FieldRef<"Article", 'String'>
    readonly collisage: FieldRef<"Article", 'String'>
    readonly type: FieldRef<"Article", 'String'>
    readonly numero: FieldRef<"Article", 'Int'>
    readonly quantite_a_demander: FieldRef<"Article", 'Decimal'>
    readonly quantite_a_stocker: FieldRef<"Article", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * Article findUnique
   */
  export type ArticleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
    /**
     * Filter, which Article to fetch.
     */
    where: ArticleWhereUniqueInput
  }

  /**
   * Article findUniqueOrThrow
   */
  export type ArticleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
    /**
     * Filter, which Article to fetch.
     */
    where: ArticleWhereUniqueInput
  }

  /**
   * Article findFirst
   */
  export type ArticleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
    /**
     * Filter, which Article to fetch.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: ArticleOrderByWithRelationInput | ArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Articles.
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Articles.
     */
    distinct?: ArticleScalarFieldEnum | ArticleScalarFieldEnum[]
  }

  /**
   * Article findFirstOrThrow
   */
  export type ArticleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
    /**
     * Filter, which Article to fetch.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: ArticleOrderByWithRelationInput | ArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Articles.
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Articles.
     */
    distinct?: ArticleScalarFieldEnum | ArticleScalarFieldEnum[]
  }

  /**
   * Article findMany
   */
  export type ArticleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
    /**
     * Filter, which Articles to fetch.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: ArticleOrderByWithRelationInput | ArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Articles.
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    distinct?: ArticleScalarFieldEnum | ArticleScalarFieldEnum[]
  }

  /**
   * Article create
   */
  export type ArticleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
    /**
     * The data needed to create a Article.
     */
    data: XOR<ArticleCreateInput, ArticleUncheckedCreateInput>
  }

  /**
   * Article createMany
   */
  export type ArticleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Articles.
     */
    data: ArticleCreateManyInput | ArticleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Article update
   */
  export type ArticleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
    /**
     * The data needed to update a Article.
     */
    data: XOR<ArticleUpdateInput, ArticleUncheckedUpdateInput>
    /**
     * Choose, which Article to update.
     */
    where: ArticleWhereUniqueInput
  }

  /**
   * Article updateMany
   */
  export type ArticleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Articles.
     */
    data: XOR<ArticleUpdateManyMutationInput, ArticleUncheckedUpdateManyInput>
    /**
     * Filter which Articles to update
     */
    where?: ArticleWhereInput
    /**
     * Limit how many Articles to update.
     */
    limit?: number
  }

  /**
   * Article upsert
   */
  export type ArticleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
    /**
     * The filter to search for the Article to update in case it exists.
     */
    where: ArticleWhereUniqueInput
    /**
     * In case the Article found by the `where` argument doesn't exist, create a new Article with this data.
     */
    create: XOR<ArticleCreateInput, ArticleUncheckedCreateInput>
    /**
     * In case the Article was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArticleUpdateInput, ArticleUncheckedUpdateInput>
  }

  /**
   * Article delete
   */
  export type ArticleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
    /**
     * Filter which Article to delete.
     */
    where: ArticleWhereUniqueInput
  }

  /**
   * Article deleteMany
   */
  export type ArticleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Articles to delete
     */
    where?: ArticleWhereInput
    /**
     * Limit how many Articles to delete.
     */
    limit?: number
  }

  /**
   * Article.bon_de_commande_categories
   */
  export type Article$bon_de_commande_categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommandeCategory
     */
    select?: BonDeCommandeCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommandeCategory
     */
    omit?: BonDeCommandeCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeCategoryInclude<ExtArgs> | null
    where?: BonDeCommandeCategoryWhereInput
    orderBy?: BonDeCommandeCategoryOrderByWithRelationInput | BonDeCommandeCategoryOrderByWithRelationInput[]
    cursor?: BonDeCommandeCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BonDeCommandeCategoryScalarFieldEnum | BonDeCommandeCategoryScalarFieldEnum[]
  }

  /**
   * Article without action
   */
  export type ArticleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    description: string | null
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    articles?: boolean | Category$articlesArgs<ExtArgs>
    commandes?: boolean | Category$commandesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>



  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description", ExtArgs["result"]["category"]>
  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    articles?: boolean | Category$articlesArgs<ExtArgs>
    commandes?: boolean | Category$commandesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      articles: Prisma.$ArticlePayload<ExtArgs>[]
      commandes: Prisma.$BonDeCommandeCategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    articles<T extends Category$articlesArgs<ExtArgs> = {}>(args?: Subset<T, Category$articlesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    commandes<T extends Category$commandesArgs<ExtArgs> = {}>(args?: Subset<T, Category$commandesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BonDeCommandeCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly description: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category.articles
   */
  export type Category$articlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
    where?: ArticleWhereInput
    orderBy?: ArticleOrderByWithRelationInput | ArticleOrderByWithRelationInput[]
    cursor?: ArticleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArticleScalarFieldEnum | ArticleScalarFieldEnum[]
  }

  /**
   * Category.commandes
   */
  export type Category$commandesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommandeCategory
     */
    select?: BonDeCommandeCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommandeCategory
     */
    omit?: BonDeCommandeCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeCategoryInclude<ExtArgs> | null
    where?: BonDeCommandeCategoryWhereInput
    orderBy?: BonDeCommandeCategoryOrderByWithRelationInput | BonDeCommandeCategoryOrderByWithRelationInput[]
    cursor?: BonDeCommandeCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BonDeCommandeCategoryScalarFieldEnum | BonDeCommandeCategoryScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model BonDeCommandeCategory
   */

  export type AggregateBonDeCommandeCategory = {
    _count: BonDeCommandeCategoryCountAggregateOutputType | null
    _avg: BonDeCommandeCategoryAvgAggregateOutputType | null
    _sum: BonDeCommandeCategorySumAggregateOutputType | null
    _min: BonDeCommandeCategoryMinAggregateOutputType | null
    _max: BonDeCommandeCategoryMaxAggregateOutputType | null
  }

  export type BonDeCommandeCategoryAvgAggregateOutputType = {
    quantite_a_demander: Decimal | null
    quantite_a_stocker: Decimal | null
  }

  export type BonDeCommandeCategorySumAggregateOutputType = {
    quantite_a_demander: Decimal | null
    quantite_a_stocker: Decimal | null
  }

  export type BonDeCommandeCategoryMinAggregateOutputType = {
    id: string | null
    category_id: string | null
    bon_de_commande_id: string | null
    article_id: string | null
    quantite_a_demander: Decimal | null
    quantite_a_stocker: Decimal | null
  }

  export type BonDeCommandeCategoryMaxAggregateOutputType = {
    id: string | null
    category_id: string | null
    bon_de_commande_id: string | null
    article_id: string | null
    quantite_a_demander: Decimal | null
    quantite_a_stocker: Decimal | null
  }

  export type BonDeCommandeCategoryCountAggregateOutputType = {
    id: number
    category_id: number
    bon_de_commande_id: number
    article_id: number
    quantite_a_demander: number
    quantite_a_stocker: number
    _all: number
  }


  export type BonDeCommandeCategoryAvgAggregateInputType = {
    quantite_a_demander?: true
    quantite_a_stocker?: true
  }

  export type BonDeCommandeCategorySumAggregateInputType = {
    quantite_a_demander?: true
    quantite_a_stocker?: true
  }

  export type BonDeCommandeCategoryMinAggregateInputType = {
    id?: true
    category_id?: true
    bon_de_commande_id?: true
    article_id?: true
    quantite_a_demander?: true
    quantite_a_stocker?: true
  }

  export type BonDeCommandeCategoryMaxAggregateInputType = {
    id?: true
    category_id?: true
    bon_de_commande_id?: true
    article_id?: true
    quantite_a_demander?: true
    quantite_a_stocker?: true
  }

  export type BonDeCommandeCategoryCountAggregateInputType = {
    id?: true
    category_id?: true
    bon_de_commande_id?: true
    article_id?: true
    quantite_a_demander?: true
    quantite_a_stocker?: true
    _all?: true
  }

  export type BonDeCommandeCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BonDeCommandeCategory to aggregate.
     */
    where?: BonDeCommandeCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BonDeCommandeCategories to fetch.
     */
    orderBy?: BonDeCommandeCategoryOrderByWithRelationInput | BonDeCommandeCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BonDeCommandeCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BonDeCommandeCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BonDeCommandeCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BonDeCommandeCategories
    **/
    _count?: true | BonDeCommandeCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BonDeCommandeCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BonDeCommandeCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BonDeCommandeCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BonDeCommandeCategoryMaxAggregateInputType
  }

  export type GetBonDeCommandeCategoryAggregateType<T extends BonDeCommandeCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateBonDeCommandeCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBonDeCommandeCategory[P]>
      : GetScalarType<T[P], AggregateBonDeCommandeCategory[P]>
  }




  export type BonDeCommandeCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BonDeCommandeCategoryWhereInput
    orderBy?: BonDeCommandeCategoryOrderByWithAggregationInput | BonDeCommandeCategoryOrderByWithAggregationInput[]
    by: BonDeCommandeCategoryScalarFieldEnum[] | BonDeCommandeCategoryScalarFieldEnum
    having?: BonDeCommandeCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BonDeCommandeCategoryCountAggregateInputType | true
    _avg?: BonDeCommandeCategoryAvgAggregateInputType
    _sum?: BonDeCommandeCategorySumAggregateInputType
    _min?: BonDeCommandeCategoryMinAggregateInputType
    _max?: BonDeCommandeCategoryMaxAggregateInputType
  }

  export type BonDeCommandeCategoryGroupByOutputType = {
    id: string
    category_id: string
    bon_de_commande_id: string
    article_id: string | null
    quantite_a_demander: Decimal | null
    quantite_a_stocker: Decimal | null
    _count: BonDeCommandeCategoryCountAggregateOutputType | null
    _avg: BonDeCommandeCategoryAvgAggregateOutputType | null
    _sum: BonDeCommandeCategorySumAggregateOutputType | null
    _min: BonDeCommandeCategoryMinAggregateOutputType | null
    _max: BonDeCommandeCategoryMaxAggregateOutputType | null
  }

  type GetBonDeCommandeCategoryGroupByPayload<T extends BonDeCommandeCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BonDeCommandeCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BonDeCommandeCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BonDeCommandeCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], BonDeCommandeCategoryGroupByOutputType[P]>
        }
      >
    >


  export type BonDeCommandeCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category_id?: boolean
    bon_de_commande_id?: boolean
    article_id?: boolean
    quantite_a_demander?: boolean
    quantite_a_stocker?: boolean
    article?: boolean | BonDeCommandeCategory$articleArgs<ExtArgs>
    bon_de_commande?: boolean | BonDeCommandeDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bonDeCommandeCategory"]>



  export type BonDeCommandeCategorySelectScalar = {
    id?: boolean
    category_id?: boolean
    bon_de_commande_id?: boolean
    article_id?: boolean
    quantite_a_demander?: boolean
    quantite_a_stocker?: boolean
  }

  export type BonDeCommandeCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "category_id" | "bon_de_commande_id" | "article_id" | "quantite_a_demander" | "quantite_a_stocker", ExtArgs["result"]["bonDeCommandeCategory"]>
  export type BonDeCommandeCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    article?: boolean | BonDeCommandeCategory$articleArgs<ExtArgs>
    bon_de_commande?: boolean | BonDeCommandeDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $BonDeCommandeCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BonDeCommandeCategory"
    objects: {
      article: Prisma.$ArticlePayload<ExtArgs> | null
      bon_de_commande: Prisma.$BonDeCommandePayload<ExtArgs>
      category: Prisma.$CategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      category_id: string
      bon_de_commande_id: string
      article_id: string | null
      quantite_a_demander: Prisma.Decimal | null
      quantite_a_stocker: Prisma.Decimal | null
    }, ExtArgs["result"]["bonDeCommandeCategory"]>
    composites: {}
  }

  type BonDeCommandeCategoryGetPayload<S extends boolean | null | undefined | BonDeCommandeCategoryDefaultArgs> = $Result.GetResult<Prisma.$BonDeCommandeCategoryPayload, S>

  type BonDeCommandeCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BonDeCommandeCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BonDeCommandeCategoryCountAggregateInputType | true
    }

  export interface BonDeCommandeCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BonDeCommandeCategory'], meta: { name: 'BonDeCommandeCategory' } }
    /**
     * Find zero or one BonDeCommandeCategory that matches the filter.
     * @param {BonDeCommandeCategoryFindUniqueArgs} args - Arguments to find a BonDeCommandeCategory
     * @example
     * // Get one BonDeCommandeCategory
     * const bonDeCommandeCategory = await prisma.bonDeCommandeCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BonDeCommandeCategoryFindUniqueArgs>(args: SelectSubset<T, BonDeCommandeCategoryFindUniqueArgs<ExtArgs>>): Prisma__BonDeCommandeCategoryClient<$Result.GetResult<Prisma.$BonDeCommandeCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BonDeCommandeCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BonDeCommandeCategoryFindUniqueOrThrowArgs} args - Arguments to find a BonDeCommandeCategory
     * @example
     * // Get one BonDeCommandeCategory
     * const bonDeCommandeCategory = await prisma.bonDeCommandeCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BonDeCommandeCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, BonDeCommandeCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BonDeCommandeCategoryClient<$Result.GetResult<Prisma.$BonDeCommandeCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BonDeCommandeCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonDeCommandeCategoryFindFirstArgs} args - Arguments to find a BonDeCommandeCategory
     * @example
     * // Get one BonDeCommandeCategory
     * const bonDeCommandeCategory = await prisma.bonDeCommandeCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BonDeCommandeCategoryFindFirstArgs>(args?: SelectSubset<T, BonDeCommandeCategoryFindFirstArgs<ExtArgs>>): Prisma__BonDeCommandeCategoryClient<$Result.GetResult<Prisma.$BonDeCommandeCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BonDeCommandeCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonDeCommandeCategoryFindFirstOrThrowArgs} args - Arguments to find a BonDeCommandeCategory
     * @example
     * // Get one BonDeCommandeCategory
     * const bonDeCommandeCategory = await prisma.bonDeCommandeCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BonDeCommandeCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, BonDeCommandeCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__BonDeCommandeCategoryClient<$Result.GetResult<Prisma.$BonDeCommandeCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BonDeCommandeCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonDeCommandeCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BonDeCommandeCategories
     * const bonDeCommandeCategories = await prisma.bonDeCommandeCategory.findMany()
     * 
     * // Get first 10 BonDeCommandeCategories
     * const bonDeCommandeCategories = await prisma.bonDeCommandeCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bonDeCommandeCategoryWithIdOnly = await prisma.bonDeCommandeCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BonDeCommandeCategoryFindManyArgs>(args?: SelectSubset<T, BonDeCommandeCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BonDeCommandeCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BonDeCommandeCategory.
     * @param {BonDeCommandeCategoryCreateArgs} args - Arguments to create a BonDeCommandeCategory.
     * @example
     * // Create one BonDeCommandeCategory
     * const BonDeCommandeCategory = await prisma.bonDeCommandeCategory.create({
     *   data: {
     *     // ... data to create a BonDeCommandeCategory
     *   }
     * })
     * 
     */
    create<T extends BonDeCommandeCategoryCreateArgs>(args: SelectSubset<T, BonDeCommandeCategoryCreateArgs<ExtArgs>>): Prisma__BonDeCommandeCategoryClient<$Result.GetResult<Prisma.$BonDeCommandeCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BonDeCommandeCategories.
     * @param {BonDeCommandeCategoryCreateManyArgs} args - Arguments to create many BonDeCommandeCategories.
     * @example
     * // Create many BonDeCommandeCategories
     * const bonDeCommandeCategory = await prisma.bonDeCommandeCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BonDeCommandeCategoryCreateManyArgs>(args?: SelectSubset<T, BonDeCommandeCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BonDeCommandeCategory.
     * @param {BonDeCommandeCategoryDeleteArgs} args - Arguments to delete one BonDeCommandeCategory.
     * @example
     * // Delete one BonDeCommandeCategory
     * const BonDeCommandeCategory = await prisma.bonDeCommandeCategory.delete({
     *   where: {
     *     // ... filter to delete one BonDeCommandeCategory
     *   }
     * })
     * 
     */
    delete<T extends BonDeCommandeCategoryDeleteArgs>(args: SelectSubset<T, BonDeCommandeCategoryDeleteArgs<ExtArgs>>): Prisma__BonDeCommandeCategoryClient<$Result.GetResult<Prisma.$BonDeCommandeCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BonDeCommandeCategory.
     * @param {BonDeCommandeCategoryUpdateArgs} args - Arguments to update one BonDeCommandeCategory.
     * @example
     * // Update one BonDeCommandeCategory
     * const bonDeCommandeCategory = await prisma.bonDeCommandeCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BonDeCommandeCategoryUpdateArgs>(args: SelectSubset<T, BonDeCommandeCategoryUpdateArgs<ExtArgs>>): Prisma__BonDeCommandeCategoryClient<$Result.GetResult<Prisma.$BonDeCommandeCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BonDeCommandeCategories.
     * @param {BonDeCommandeCategoryDeleteManyArgs} args - Arguments to filter BonDeCommandeCategories to delete.
     * @example
     * // Delete a few BonDeCommandeCategories
     * const { count } = await prisma.bonDeCommandeCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BonDeCommandeCategoryDeleteManyArgs>(args?: SelectSubset<T, BonDeCommandeCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BonDeCommandeCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonDeCommandeCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BonDeCommandeCategories
     * const bonDeCommandeCategory = await prisma.bonDeCommandeCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BonDeCommandeCategoryUpdateManyArgs>(args: SelectSubset<T, BonDeCommandeCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BonDeCommandeCategory.
     * @param {BonDeCommandeCategoryUpsertArgs} args - Arguments to update or create a BonDeCommandeCategory.
     * @example
     * // Update or create a BonDeCommandeCategory
     * const bonDeCommandeCategory = await prisma.bonDeCommandeCategory.upsert({
     *   create: {
     *     // ... data to create a BonDeCommandeCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BonDeCommandeCategory we want to update
     *   }
     * })
     */
    upsert<T extends BonDeCommandeCategoryUpsertArgs>(args: SelectSubset<T, BonDeCommandeCategoryUpsertArgs<ExtArgs>>): Prisma__BonDeCommandeCategoryClient<$Result.GetResult<Prisma.$BonDeCommandeCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BonDeCommandeCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonDeCommandeCategoryCountArgs} args - Arguments to filter BonDeCommandeCategories to count.
     * @example
     * // Count the number of BonDeCommandeCategories
     * const count = await prisma.bonDeCommandeCategory.count({
     *   where: {
     *     // ... the filter for the BonDeCommandeCategories we want to count
     *   }
     * })
    **/
    count<T extends BonDeCommandeCategoryCountArgs>(
      args?: Subset<T, BonDeCommandeCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BonDeCommandeCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BonDeCommandeCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonDeCommandeCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BonDeCommandeCategoryAggregateArgs>(args: Subset<T, BonDeCommandeCategoryAggregateArgs>): Prisma.PrismaPromise<GetBonDeCommandeCategoryAggregateType<T>>

    /**
     * Group by BonDeCommandeCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonDeCommandeCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BonDeCommandeCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BonDeCommandeCategoryGroupByArgs['orderBy'] }
        : { orderBy?: BonDeCommandeCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BonDeCommandeCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBonDeCommandeCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BonDeCommandeCategory model
   */
  readonly fields: BonDeCommandeCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BonDeCommandeCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BonDeCommandeCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    article<T extends BonDeCommandeCategory$articleArgs<ExtArgs> = {}>(args?: Subset<T, BonDeCommandeCategory$articleArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    bon_de_commande<T extends BonDeCommandeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BonDeCommandeDefaultArgs<ExtArgs>>): Prisma__BonDeCommandeClient<$Result.GetResult<Prisma.$BonDeCommandePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BonDeCommandeCategory model
   */
  interface BonDeCommandeCategoryFieldRefs {
    readonly id: FieldRef<"BonDeCommandeCategory", 'String'>
    readonly category_id: FieldRef<"BonDeCommandeCategory", 'String'>
    readonly bon_de_commande_id: FieldRef<"BonDeCommandeCategory", 'String'>
    readonly article_id: FieldRef<"BonDeCommandeCategory", 'String'>
    readonly quantite_a_demander: FieldRef<"BonDeCommandeCategory", 'Decimal'>
    readonly quantite_a_stocker: FieldRef<"BonDeCommandeCategory", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * BonDeCommandeCategory findUnique
   */
  export type BonDeCommandeCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommandeCategory
     */
    select?: BonDeCommandeCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommandeCategory
     */
    omit?: BonDeCommandeCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeCategoryInclude<ExtArgs> | null
    /**
     * Filter, which BonDeCommandeCategory to fetch.
     */
    where: BonDeCommandeCategoryWhereUniqueInput
  }

  /**
   * BonDeCommandeCategory findUniqueOrThrow
   */
  export type BonDeCommandeCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommandeCategory
     */
    select?: BonDeCommandeCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommandeCategory
     */
    omit?: BonDeCommandeCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeCategoryInclude<ExtArgs> | null
    /**
     * Filter, which BonDeCommandeCategory to fetch.
     */
    where: BonDeCommandeCategoryWhereUniqueInput
  }

  /**
   * BonDeCommandeCategory findFirst
   */
  export type BonDeCommandeCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommandeCategory
     */
    select?: BonDeCommandeCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommandeCategory
     */
    omit?: BonDeCommandeCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeCategoryInclude<ExtArgs> | null
    /**
     * Filter, which BonDeCommandeCategory to fetch.
     */
    where?: BonDeCommandeCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BonDeCommandeCategories to fetch.
     */
    orderBy?: BonDeCommandeCategoryOrderByWithRelationInput | BonDeCommandeCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BonDeCommandeCategories.
     */
    cursor?: BonDeCommandeCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BonDeCommandeCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BonDeCommandeCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BonDeCommandeCategories.
     */
    distinct?: BonDeCommandeCategoryScalarFieldEnum | BonDeCommandeCategoryScalarFieldEnum[]
  }

  /**
   * BonDeCommandeCategory findFirstOrThrow
   */
  export type BonDeCommandeCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommandeCategory
     */
    select?: BonDeCommandeCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommandeCategory
     */
    omit?: BonDeCommandeCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeCategoryInclude<ExtArgs> | null
    /**
     * Filter, which BonDeCommandeCategory to fetch.
     */
    where?: BonDeCommandeCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BonDeCommandeCategories to fetch.
     */
    orderBy?: BonDeCommandeCategoryOrderByWithRelationInput | BonDeCommandeCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BonDeCommandeCategories.
     */
    cursor?: BonDeCommandeCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BonDeCommandeCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BonDeCommandeCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BonDeCommandeCategories.
     */
    distinct?: BonDeCommandeCategoryScalarFieldEnum | BonDeCommandeCategoryScalarFieldEnum[]
  }

  /**
   * BonDeCommandeCategory findMany
   */
  export type BonDeCommandeCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommandeCategory
     */
    select?: BonDeCommandeCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommandeCategory
     */
    omit?: BonDeCommandeCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeCategoryInclude<ExtArgs> | null
    /**
     * Filter, which BonDeCommandeCategories to fetch.
     */
    where?: BonDeCommandeCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BonDeCommandeCategories to fetch.
     */
    orderBy?: BonDeCommandeCategoryOrderByWithRelationInput | BonDeCommandeCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BonDeCommandeCategories.
     */
    cursor?: BonDeCommandeCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BonDeCommandeCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BonDeCommandeCategories.
     */
    skip?: number
    distinct?: BonDeCommandeCategoryScalarFieldEnum | BonDeCommandeCategoryScalarFieldEnum[]
  }

  /**
   * BonDeCommandeCategory create
   */
  export type BonDeCommandeCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommandeCategory
     */
    select?: BonDeCommandeCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommandeCategory
     */
    omit?: BonDeCommandeCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a BonDeCommandeCategory.
     */
    data: XOR<BonDeCommandeCategoryCreateInput, BonDeCommandeCategoryUncheckedCreateInput>
  }

  /**
   * BonDeCommandeCategory createMany
   */
  export type BonDeCommandeCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BonDeCommandeCategories.
     */
    data: BonDeCommandeCategoryCreateManyInput | BonDeCommandeCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BonDeCommandeCategory update
   */
  export type BonDeCommandeCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommandeCategory
     */
    select?: BonDeCommandeCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommandeCategory
     */
    omit?: BonDeCommandeCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a BonDeCommandeCategory.
     */
    data: XOR<BonDeCommandeCategoryUpdateInput, BonDeCommandeCategoryUncheckedUpdateInput>
    /**
     * Choose, which BonDeCommandeCategory to update.
     */
    where: BonDeCommandeCategoryWhereUniqueInput
  }

  /**
   * BonDeCommandeCategory updateMany
   */
  export type BonDeCommandeCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BonDeCommandeCategories.
     */
    data: XOR<BonDeCommandeCategoryUpdateManyMutationInput, BonDeCommandeCategoryUncheckedUpdateManyInput>
    /**
     * Filter which BonDeCommandeCategories to update
     */
    where?: BonDeCommandeCategoryWhereInput
    /**
     * Limit how many BonDeCommandeCategories to update.
     */
    limit?: number
  }

  /**
   * BonDeCommandeCategory upsert
   */
  export type BonDeCommandeCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommandeCategory
     */
    select?: BonDeCommandeCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommandeCategory
     */
    omit?: BonDeCommandeCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the BonDeCommandeCategory to update in case it exists.
     */
    where: BonDeCommandeCategoryWhereUniqueInput
    /**
     * In case the BonDeCommandeCategory found by the `where` argument doesn't exist, create a new BonDeCommandeCategory with this data.
     */
    create: XOR<BonDeCommandeCategoryCreateInput, BonDeCommandeCategoryUncheckedCreateInput>
    /**
     * In case the BonDeCommandeCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BonDeCommandeCategoryUpdateInput, BonDeCommandeCategoryUncheckedUpdateInput>
  }

  /**
   * BonDeCommandeCategory delete
   */
  export type BonDeCommandeCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommandeCategory
     */
    select?: BonDeCommandeCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommandeCategory
     */
    omit?: BonDeCommandeCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeCategoryInclude<ExtArgs> | null
    /**
     * Filter which BonDeCommandeCategory to delete.
     */
    where: BonDeCommandeCategoryWhereUniqueInput
  }

  /**
   * BonDeCommandeCategory deleteMany
   */
  export type BonDeCommandeCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BonDeCommandeCategories to delete
     */
    where?: BonDeCommandeCategoryWhereInput
    /**
     * Limit how many BonDeCommandeCategories to delete.
     */
    limit?: number
  }

  /**
   * BonDeCommandeCategory.article
   */
  export type BonDeCommandeCategory$articleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArticleInclude<ExtArgs> | null
    where?: ArticleWhereInput
  }

  /**
   * BonDeCommandeCategory without action
   */
  export type BonDeCommandeCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommandeCategory
     */
    select?: BonDeCommandeCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommandeCategory
     */
    omit?: BonDeCommandeCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeCategoryInclude<ExtArgs> | null
  }


  /**
   * Model BonDeCommande
   */

  export type AggregateBonDeCommande = {
    _count: BonDeCommandeCountAggregateOutputType | null
    _min: BonDeCommandeMinAggregateOutputType | null
    _max: BonDeCommandeMaxAggregateOutputType | null
  }

  export type BonDeCommandeMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    description: string | null
    status: string | null
    employee_id: string | null
    code: string | null
    target_date: Date | null
  }

  export type BonDeCommandeMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    description: string | null
    status: string | null
    employee_id: string | null
    code: string | null
    target_date: Date | null
  }

  export type BonDeCommandeCountAggregateOutputType = {
    id: number
    created_at: number
    description: number
    status: number
    employee_id: number
    code: number
    target_date: number
    _all: number
  }


  export type BonDeCommandeMinAggregateInputType = {
    id?: true
    created_at?: true
    description?: true
    status?: true
    employee_id?: true
    code?: true
    target_date?: true
  }

  export type BonDeCommandeMaxAggregateInputType = {
    id?: true
    created_at?: true
    description?: true
    status?: true
    employee_id?: true
    code?: true
    target_date?: true
  }

  export type BonDeCommandeCountAggregateInputType = {
    id?: true
    created_at?: true
    description?: true
    status?: true
    employee_id?: true
    code?: true
    target_date?: true
    _all?: true
  }

  export type BonDeCommandeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BonDeCommande to aggregate.
     */
    where?: BonDeCommandeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BonDeCommandes to fetch.
     */
    orderBy?: BonDeCommandeOrderByWithRelationInput | BonDeCommandeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BonDeCommandeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BonDeCommandes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BonDeCommandes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BonDeCommandes
    **/
    _count?: true | BonDeCommandeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BonDeCommandeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BonDeCommandeMaxAggregateInputType
  }

  export type GetBonDeCommandeAggregateType<T extends BonDeCommandeAggregateArgs> = {
        [P in keyof T & keyof AggregateBonDeCommande]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBonDeCommande[P]>
      : GetScalarType<T[P], AggregateBonDeCommande[P]>
  }




  export type BonDeCommandeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BonDeCommandeWhereInput
    orderBy?: BonDeCommandeOrderByWithAggregationInput | BonDeCommandeOrderByWithAggregationInput[]
    by: BonDeCommandeScalarFieldEnum[] | BonDeCommandeScalarFieldEnum
    having?: BonDeCommandeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BonDeCommandeCountAggregateInputType | true
    _min?: BonDeCommandeMinAggregateInputType
    _max?: BonDeCommandeMaxAggregateInputType
  }

  export type BonDeCommandeGroupByOutputType = {
    id: string
    created_at: Date
    description: string
    status: string
    employee_id: string
    code: string
    target_date: Date
    _count: BonDeCommandeCountAggregateOutputType | null
    _min: BonDeCommandeMinAggregateOutputType | null
    _max: BonDeCommandeMaxAggregateOutputType | null
  }

  type GetBonDeCommandeGroupByPayload<T extends BonDeCommandeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BonDeCommandeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BonDeCommandeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BonDeCommandeGroupByOutputType[P]>
            : GetScalarType<T[P], BonDeCommandeGroupByOutputType[P]>
        }
      >
    >


  export type BonDeCommandeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    description?: boolean
    status?: boolean
    employee_id?: boolean
    code?: boolean
    target_date?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    categories?: boolean | BonDeCommande$categoriesArgs<ExtArgs>
    _count?: boolean | BonDeCommandeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bonDeCommande"]>



  export type BonDeCommandeSelectScalar = {
    id?: boolean
    created_at?: boolean
    description?: boolean
    status?: boolean
    employee_id?: boolean
    code?: boolean
    target_date?: boolean
  }

  export type BonDeCommandeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "description" | "status" | "employee_id" | "code" | "target_date", ExtArgs["result"]["bonDeCommande"]>
  export type BonDeCommandeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    categories?: boolean | BonDeCommande$categoriesArgs<ExtArgs>
    _count?: boolean | BonDeCommandeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BonDeCommandePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BonDeCommande"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      categories: Prisma.$BonDeCommandeCategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      created_at: Date
      description: string
      status: string
      employee_id: string
      code: string
      target_date: Date
    }, ExtArgs["result"]["bonDeCommande"]>
    composites: {}
  }

  type BonDeCommandeGetPayload<S extends boolean | null | undefined | BonDeCommandeDefaultArgs> = $Result.GetResult<Prisma.$BonDeCommandePayload, S>

  type BonDeCommandeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BonDeCommandeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BonDeCommandeCountAggregateInputType | true
    }

  export interface BonDeCommandeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BonDeCommande'], meta: { name: 'BonDeCommande' } }
    /**
     * Find zero or one BonDeCommande that matches the filter.
     * @param {BonDeCommandeFindUniqueArgs} args - Arguments to find a BonDeCommande
     * @example
     * // Get one BonDeCommande
     * const bonDeCommande = await prisma.bonDeCommande.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BonDeCommandeFindUniqueArgs>(args: SelectSubset<T, BonDeCommandeFindUniqueArgs<ExtArgs>>): Prisma__BonDeCommandeClient<$Result.GetResult<Prisma.$BonDeCommandePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BonDeCommande that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BonDeCommandeFindUniqueOrThrowArgs} args - Arguments to find a BonDeCommande
     * @example
     * // Get one BonDeCommande
     * const bonDeCommande = await prisma.bonDeCommande.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BonDeCommandeFindUniqueOrThrowArgs>(args: SelectSubset<T, BonDeCommandeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BonDeCommandeClient<$Result.GetResult<Prisma.$BonDeCommandePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BonDeCommande that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonDeCommandeFindFirstArgs} args - Arguments to find a BonDeCommande
     * @example
     * // Get one BonDeCommande
     * const bonDeCommande = await prisma.bonDeCommande.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BonDeCommandeFindFirstArgs>(args?: SelectSubset<T, BonDeCommandeFindFirstArgs<ExtArgs>>): Prisma__BonDeCommandeClient<$Result.GetResult<Prisma.$BonDeCommandePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BonDeCommande that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonDeCommandeFindFirstOrThrowArgs} args - Arguments to find a BonDeCommande
     * @example
     * // Get one BonDeCommande
     * const bonDeCommande = await prisma.bonDeCommande.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BonDeCommandeFindFirstOrThrowArgs>(args?: SelectSubset<T, BonDeCommandeFindFirstOrThrowArgs<ExtArgs>>): Prisma__BonDeCommandeClient<$Result.GetResult<Prisma.$BonDeCommandePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BonDeCommandes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonDeCommandeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BonDeCommandes
     * const bonDeCommandes = await prisma.bonDeCommande.findMany()
     * 
     * // Get first 10 BonDeCommandes
     * const bonDeCommandes = await prisma.bonDeCommande.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bonDeCommandeWithIdOnly = await prisma.bonDeCommande.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BonDeCommandeFindManyArgs>(args?: SelectSubset<T, BonDeCommandeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BonDeCommandePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BonDeCommande.
     * @param {BonDeCommandeCreateArgs} args - Arguments to create a BonDeCommande.
     * @example
     * // Create one BonDeCommande
     * const BonDeCommande = await prisma.bonDeCommande.create({
     *   data: {
     *     // ... data to create a BonDeCommande
     *   }
     * })
     * 
     */
    create<T extends BonDeCommandeCreateArgs>(args: SelectSubset<T, BonDeCommandeCreateArgs<ExtArgs>>): Prisma__BonDeCommandeClient<$Result.GetResult<Prisma.$BonDeCommandePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BonDeCommandes.
     * @param {BonDeCommandeCreateManyArgs} args - Arguments to create many BonDeCommandes.
     * @example
     * // Create many BonDeCommandes
     * const bonDeCommande = await prisma.bonDeCommande.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BonDeCommandeCreateManyArgs>(args?: SelectSubset<T, BonDeCommandeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BonDeCommande.
     * @param {BonDeCommandeDeleteArgs} args - Arguments to delete one BonDeCommande.
     * @example
     * // Delete one BonDeCommande
     * const BonDeCommande = await prisma.bonDeCommande.delete({
     *   where: {
     *     // ... filter to delete one BonDeCommande
     *   }
     * })
     * 
     */
    delete<T extends BonDeCommandeDeleteArgs>(args: SelectSubset<T, BonDeCommandeDeleteArgs<ExtArgs>>): Prisma__BonDeCommandeClient<$Result.GetResult<Prisma.$BonDeCommandePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BonDeCommande.
     * @param {BonDeCommandeUpdateArgs} args - Arguments to update one BonDeCommande.
     * @example
     * // Update one BonDeCommande
     * const bonDeCommande = await prisma.bonDeCommande.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BonDeCommandeUpdateArgs>(args: SelectSubset<T, BonDeCommandeUpdateArgs<ExtArgs>>): Prisma__BonDeCommandeClient<$Result.GetResult<Prisma.$BonDeCommandePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BonDeCommandes.
     * @param {BonDeCommandeDeleteManyArgs} args - Arguments to filter BonDeCommandes to delete.
     * @example
     * // Delete a few BonDeCommandes
     * const { count } = await prisma.bonDeCommande.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BonDeCommandeDeleteManyArgs>(args?: SelectSubset<T, BonDeCommandeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BonDeCommandes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonDeCommandeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BonDeCommandes
     * const bonDeCommande = await prisma.bonDeCommande.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BonDeCommandeUpdateManyArgs>(args: SelectSubset<T, BonDeCommandeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BonDeCommande.
     * @param {BonDeCommandeUpsertArgs} args - Arguments to update or create a BonDeCommande.
     * @example
     * // Update or create a BonDeCommande
     * const bonDeCommande = await prisma.bonDeCommande.upsert({
     *   create: {
     *     // ... data to create a BonDeCommande
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BonDeCommande we want to update
     *   }
     * })
     */
    upsert<T extends BonDeCommandeUpsertArgs>(args: SelectSubset<T, BonDeCommandeUpsertArgs<ExtArgs>>): Prisma__BonDeCommandeClient<$Result.GetResult<Prisma.$BonDeCommandePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BonDeCommandes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonDeCommandeCountArgs} args - Arguments to filter BonDeCommandes to count.
     * @example
     * // Count the number of BonDeCommandes
     * const count = await prisma.bonDeCommande.count({
     *   where: {
     *     // ... the filter for the BonDeCommandes we want to count
     *   }
     * })
    **/
    count<T extends BonDeCommandeCountArgs>(
      args?: Subset<T, BonDeCommandeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BonDeCommandeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BonDeCommande.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonDeCommandeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BonDeCommandeAggregateArgs>(args: Subset<T, BonDeCommandeAggregateArgs>): Prisma.PrismaPromise<GetBonDeCommandeAggregateType<T>>

    /**
     * Group by BonDeCommande.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonDeCommandeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BonDeCommandeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BonDeCommandeGroupByArgs['orderBy'] }
        : { orderBy?: BonDeCommandeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BonDeCommandeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBonDeCommandeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BonDeCommande model
   */
  readonly fields: BonDeCommandeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BonDeCommande.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BonDeCommandeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    categories<T extends BonDeCommande$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, BonDeCommande$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BonDeCommandeCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BonDeCommande model
   */
  interface BonDeCommandeFieldRefs {
    readonly id: FieldRef<"BonDeCommande", 'String'>
    readonly created_at: FieldRef<"BonDeCommande", 'DateTime'>
    readonly description: FieldRef<"BonDeCommande", 'String'>
    readonly status: FieldRef<"BonDeCommande", 'String'>
    readonly employee_id: FieldRef<"BonDeCommande", 'String'>
    readonly code: FieldRef<"BonDeCommande", 'String'>
    readonly target_date: FieldRef<"BonDeCommande", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BonDeCommande findUnique
   */
  export type BonDeCommandeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommande
     */
    select?: BonDeCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommande
     */
    omit?: BonDeCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeInclude<ExtArgs> | null
    /**
     * Filter, which BonDeCommande to fetch.
     */
    where: BonDeCommandeWhereUniqueInput
  }

  /**
   * BonDeCommande findUniqueOrThrow
   */
  export type BonDeCommandeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommande
     */
    select?: BonDeCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommande
     */
    omit?: BonDeCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeInclude<ExtArgs> | null
    /**
     * Filter, which BonDeCommande to fetch.
     */
    where: BonDeCommandeWhereUniqueInput
  }

  /**
   * BonDeCommande findFirst
   */
  export type BonDeCommandeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommande
     */
    select?: BonDeCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommande
     */
    omit?: BonDeCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeInclude<ExtArgs> | null
    /**
     * Filter, which BonDeCommande to fetch.
     */
    where?: BonDeCommandeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BonDeCommandes to fetch.
     */
    orderBy?: BonDeCommandeOrderByWithRelationInput | BonDeCommandeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BonDeCommandes.
     */
    cursor?: BonDeCommandeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BonDeCommandes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BonDeCommandes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BonDeCommandes.
     */
    distinct?: BonDeCommandeScalarFieldEnum | BonDeCommandeScalarFieldEnum[]
  }

  /**
   * BonDeCommande findFirstOrThrow
   */
  export type BonDeCommandeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommande
     */
    select?: BonDeCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommande
     */
    omit?: BonDeCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeInclude<ExtArgs> | null
    /**
     * Filter, which BonDeCommande to fetch.
     */
    where?: BonDeCommandeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BonDeCommandes to fetch.
     */
    orderBy?: BonDeCommandeOrderByWithRelationInput | BonDeCommandeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BonDeCommandes.
     */
    cursor?: BonDeCommandeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BonDeCommandes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BonDeCommandes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BonDeCommandes.
     */
    distinct?: BonDeCommandeScalarFieldEnum | BonDeCommandeScalarFieldEnum[]
  }

  /**
   * BonDeCommande findMany
   */
  export type BonDeCommandeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommande
     */
    select?: BonDeCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommande
     */
    omit?: BonDeCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeInclude<ExtArgs> | null
    /**
     * Filter, which BonDeCommandes to fetch.
     */
    where?: BonDeCommandeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BonDeCommandes to fetch.
     */
    orderBy?: BonDeCommandeOrderByWithRelationInput | BonDeCommandeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BonDeCommandes.
     */
    cursor?: BonDeCommandeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BonDeCommandes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BonDeCommandes.
     */
    skip?: number
    distinct?: BonDeCommandeScalarFieldEnum | BonDeCommandeScalarFieldEnum[]
  }

  /**
   * BonDeCommande create
   */
  export type BonDeCommandeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommande
     */
    select?: BonDeCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommande
     */
    omit?: BonDeCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeInclude<ExtArgs> | null
    /**
     * The data needed to create a BonDeCommande.
     */
    data: XOR<BonDeCommandeCreateInput, BonDeCommandeUncheckedCreateInput>
  }

  /**
   * BonDeCommande createMany
   */
  export type BonDeCommandeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BonDeCommandes.
     */
    data: BonDeCommandeCreateManyInput | BonDeCommandeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BonDeCommande update
   */
  export type BonDeCommandeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommande
     */
    select?: BonDeCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommande
     */
    omit?: BonDeCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeInclude<ExtArgs> | null
    /**
     * The data needed to update a BonDeCommande.
     */
    data: XOR<BonDeCommandeUpdateInput, BonDeCommandeUncheckedUpdateInput>
    /**
     * Choose, which BonDeCommande to update.
     */
    where: BonDeCommandeWhereUniqueInput
  }

  /**
   * BonDeCommande updateMany
   */
  export type BonDeCommandeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BonDeCommandes.
     */
    data: XOR<BonDeCommandeUpdateManyMutationInput, BonDeCommandeUncheckedUpdateManyInput>
    /**
     * Filter which BonDeCommandes to update
     */
    where?: BonDeCommandeWhereInput
    /**
     * Limit how many BonDeCommandes to update.
     */
    limit?: number
  }

  /**
   * BonDeCommande upsert
   */
  export type BonDeCommandeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommande
     */
    select?: BonDeCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommande
     */
    omit?: BonDeCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeInclude<ExtArgs> | null
    /**
     * The filter to search for the BonDeCommande to update in case it exists.
     */
    where: BonDeCommandeWhereUniqueInput
    /**
     * In case the BonDeCommande found by the `where` argument doesn't exist, create a new BonDeCommande with this data.
     */
    create: XOR<BonDeCommandeCreateInput, BonDeCommandeUncheckedCreateInput>
    /**
     * In case the BonDeCommande was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BonDeCommandeUpdateInput, BonDeCommandeUncheckedUpdateInput>
  }

  /**
   * BonDeCommande delete
   */
  export type BonDeCommandeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommande
     */
    select?: BonDeCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommande
     */
    omit?: BonDeCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeInclude<ExtArgs> | null
    /**
     * Filter which BonDeCommande to delete.
     */
    where: BonDeCommandeWhereUniqueInput
  }

  /**
   * BonDeCommande deleteMany
   */
  export type BonDeCommandeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BonDeCommandes to delete
     */
    where?: BonDeCommandeWhereInput
    /**
     * Limit how many BonDeCommandes to delete.
     */
    limit?: number
  }

  /**
   * BonDeCommande.categories
   */
  export type BonDeCommande$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommandeCategory
     */
    select?: BonDeCommandeCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommandeCategory
     */
    omit?: BonDeCommandeCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeCategoryInclude<ExtArgs> | null
    where?: BonDeCommandeCategoryWhereInput
    orderBy?: BonDeCommandeCategoryOrderByWithRelationInput | BonDeCommandeCategoryOrderByWithRelationInput[]
    cursor?: BonDeCommandeCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BonDeCommandeCategoryScalarFieldEnum | BonDeCommandeCategoryScalarFieldEnum[]
  }

  /**
   * BonDeCommande without action
   */
  export type BonDeCommandeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommande
     */
    select?: BonDeCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommande
     */
    omit?: BonDeCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeInclude<ExtArgs> | null
  }


  /**
   * Model Employee
   */

  export type AggregateEmployee = {
    _count: EmployeeCountAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeMinAggregateOutputType = {
    id: string | null
    user_id: string | null
  }

  export type EmployeeMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
  }

  export type EmployeeCountAggregateOutputType = {
    id: number
    user_id: number
    _all: number
  }


  export type EmployeeMinAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type EmployeeMaxAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type EmployeeCountAggregateInputType = {
    id?: true
    user_id?: true
    _all?: true
  }

  export type EmployeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employee to aggregate.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    _count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }




  export type EmployeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithAggregationInput | EmployeeOrderByWithAggregationInput[]
    by: EmployeeScalarFieldEnum[] | EmployeeScalarFieldEnum
    having?: EmployeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeCountAggregateInputType | true
    _min?: EmployeeMinAggregateInputType
    _max?: EmployeeMaxAggregateInputType
  }

  export type EmployeeGroupByOutputType = {
    id: string
    user_id: string
    _count: EmployeeCountAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  type GetEmployeeGroupByPayload<T extends EmployeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    bons_de_commande?: boolean | Employee$bons_de_commandeArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    gerant_assignments?: boolean | Employee$gerant_assignmentsArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>



  export type EmployeeSelectScalar = {
    id?: boolean
    user_id?: boolean
  }

  export type EmployeeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id", ExtArgs["result"]["employee"]>
  export type EmployeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bons_de_commande?: boolean | Employee$bons_de_commandeArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    gerant_assignments?: boolean | Employee$gerant_assignmentsArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EmployeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employee"
    objects: {
      bons_de_commande: Prisma.$BonDeCommandePayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
      gerant_assignments: Prisma.$GerantEmployeeAssignmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
    }, ExtArgs["result"]["employee"]>
    composites: {}
  }

  type EmployeeGetPayload<S extends boolean | null | undefined | EmployeeDefaultArgs> = $Result.GetResult<Prisma.$EmployeePayload, S>

  type EmployeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmployeeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmployeeCountAggregateInputType | true
    }

  export interface EmployeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employee'], meta: { name: 'Employee' } }
    /**
     * Find zero or one Employee that matches the filter.
     * @param {EmployeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeFindUniqueArgs>(args: SelectSubset<T, EmployeeFindUniqueArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Employee that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmployeeFindUniqueOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeFindFirstArgs>(args?: SelectSubset<T, EmployeeFindFirstArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeFindManyArgs>(args?: SelectSubset<T, EmployeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Employee.
     * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
     */
    create<T extends EmployeeCreateArgs>(args: SelectSubset<T, EmployeeCreateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Employees.
     * @param {EmployeeCreateManyArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeCreateManyArgs>(args?: SelectSubset<T, EmployeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Employee.
     * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
     */
    delete<T extends EmployeeDeleteArgs>(args: SelectSubset<T, EmployeeDeleteArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Employee.
     * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeUpdateArgs>(args: SelectSubset<T, EmployeeUpdateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Employees.
     * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeDeleteManyArgs>(args?: SelectSubset<T, EmployeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeUpdateManyArgs>(args: SelectSubset<T, EmployeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Employee.
     * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeUpsertArgs>(args: SelectSubset<T, EmployeeUpsertArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends EmployeeCountArgs>(
      args?: Subset<T, EmployeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAggregateType<T>>

    /**
     * Group by Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employee model
   */
  readonly fields: EmployeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bons_de_commande<T extends Employee$bons_de_commandeArgs<ExtArgs> = {}>(args?: Subset<T, Employee$bons_de_commandeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BonDeCommandePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    gerant_assignments<T extends Employee$gerant_assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$gerant_assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GerantEmployeeAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Employee model
   */
  interface EmployeeFieldRefs {
    readonly id: FieldRef<"Employee", 'String'>
    readonly user_id: FieldRef<"Employee", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Employee findUnique
   */
  export type EmployeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findUniqueOrThrow
   */
  export type EmployeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findFirst
   */
  export type EmployeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findFirstOrThrow
   */
  export type EmployeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findMany
   */
  export type EmployeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee create
   */
  export type EmployeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to create a Employee.
     */
    data: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
  }

  /**
   * Employee createMany
   */
  export type EmployeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employee update
   */
  export type EmployeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to update a Employee.
     */
    data: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
    /**
     * Choose, which Employee to update.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee updateMany
   */
  export type EmployeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to update.
     */
    limit?: number
  }

  /**
   * Employee upsert
   */
  export type EmployeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The filter to search for the Employee to update in case it exists.
     */
    where: EmployeeWhereUniqueInput
    /**
     * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
     */
    create: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
    /**
     * In case the Employee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
  }

  /**
   * Employee delete
   */
  export type EmployeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter which Employee to delete.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee deleteMany
   */
  export type EmployeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employees to delete
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to delete.
     */
    limit?: number
  }

  /**
   * Employee.bons_de_commande
   */
  export type Employee$bons_de_commandeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonDeCommande
     */
    select?: BonDeCommandeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonDeCommande
     */
    omit?: BonDeCommandeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonDeCommandeInclude<ExtArgs> | null
    where?: BonDeCommandeWhereInput
    orderBy?: BonDeCommandeOrderByWithRelationInput | BonDeCommandeOrderByWithRelationInput[]
    cursor?: BonDeCommandeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BonDeCommandeScalarFieldEnum | BonDeCommandeScalarFieldEnum[]
  }

  /**
   * Employee.gerant_assignments
   */
  export type Employee$gerant_assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GerantEmployeeAssignment
     */
    select?: GerantEmployeeAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GerantEmployeeAssignment
     */
    omit?: GerantEmployeeAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GerantEmployeeAssignmentInclude<ExtArgs> | null
    where?: GerantEmployeeAssignmentWhereInput
    orderBy?: GerantEmployeeAssignmentOrderByWithRelationInput | GerantEmployeeAssignmentOrderByWithRelationInput[]
    cursor?: GerantEmployeeAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GerantEmployeeAssignmentScalarFieldEnum | GerantEmployeeAssignmentScalarFieldEnum[]
  }

  /**
   * Employee without action
   */
  export type EmployeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
    role_id: string | null
    refreshToken: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
    role_id: string | null
    refreshToken: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    role_id: number
    refreshToken: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    role_id?: true
    refreshToken?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    role_id?: true
    refreshToken?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    role_id?: true
    refreshToken?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    email: string
    password: string
    role_id: string
    refreshToken: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role_id?: boolean
    refreshToken?: boolean
    admin?: boolean | User$adminArgs<ExtArgs>
    employee?: boolean | User$employeeArgs<ExtArgs>
    gerant_assignments?: boolean | User$gerant_assignmentsArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role_id?: boolean
    refreshToken?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "email" | "password" | "role_id" | "refreshToken", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | User$adminArgs<ExtArgs>
    employee?: boolean | User$employeeArgs<ExtArgs>
    gerant_assignments?: boolean | User$gerant_assignmentsArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      admin: Prisma.$AdminPayload<ExtArgs> | null
      employee: Prisma.$EmployeePayload<ExtArgs> | null
      gerant_assignments: Prisma.$GerantEmployeeAssignmentPayload<ExtArgs>[]
      role: Prisma.$RolePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      email: string
      password: string
      role_id: string
      refreshToken: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends User$adminArgs<ExtArgs> = {}>(args?: Subset<T, User$adminArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    employee<T extends User$employeeArgs<ExtArgs> = {}>(args?: Subset<T, User$employeeArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    gerant_assignments<T extends User$gerant_assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$gerant_assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GerantEmployeeAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role_id: FieldRef<"User", 'String'>
    readonly refreshToken: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.admin
   */
  export type User$adminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    where?: AdminWhereInput
  }

  /**
   * User.employee
   */
  export type User$employeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
  }

  /**
   * User.gerant_assignments
   */
  export type User$gerant_assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GerantEmployeeAssignment
     */
    select?: GerantEmployeeAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GerantEmployeeAssignment
     */
    omit?: GerantEmployeeAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GerantEmployeeAssignmentInclude<ExtArgs> | null
    where?: GerantEmployeeAssignmentWhereInput
    orderBy?: GerantEmployeeAssignmentOrderByWithRelationInput | GerantEmployeeAssignmentOrderByWithRelationInput[]
    cursor?: GerantEmployeeAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GerantEmployeeAssignmentScalarFieldEnum | GerantEmployeeAssignmentScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type RoleMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: string
    name: string
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    users?: boolean | Role$usersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>



  export type RoleSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type RoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["role"]>
  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Role$usersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Role$usersArgs<ExtArgs> = {}>(args?: Subset<T, Role$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'String'>
    readonly name: FieldRef<"Role", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to delete.
     */
    limit?: number
  }

  /**
   * Role.users
   */
  export type Role$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminMinAggregateOutputType = {
    id: string | null
    user_id: string | null
  }

  export type AdminMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    user_id: number
    _all: number
  }


  export type AdminMinAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    user_id?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: string
    user_id: string
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>



  export type AdminSelectScalar = {
    id?: boolean
    user_id?: boolean
  }

  export type AdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id", ExtArgs["result"]["admin"]>
  export type AdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'String'>
    readonly user_id: FieldRef<"Admin", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to delete.
     */
    limit?: number
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
  }


  /**
   * Model GerantEmployeeAssignment
   */

  export type AggregateGerantEmployeeAssignment = {
    _count: GerantEmployeeAssignmentCountAggregateOutputType | null
    _min: GerantEmployeeAssignmentMinAggregateOutputType | null
    _max: GerantEmployeeAssignmentMaxAggregateOutputType | null
  }

  export type GerantEmployeeAssignmentMinAggregateOutputType = {
    id: string | null
    gerant_id: string | null
    employee_id: string | null
    created_at: Date | null
  }

  export type GerantEmployeeAssignmentMaxAggregateOutputType = {
    id: string | null
    gerant_id: string | null
    employee_id: string | null
    created_at: Date | null
  }

  export type GerantEmployeeAssignmentCountAggregateOutputType = {
    id: number
    gerant_id: number
    employee_id: number
    created_at: number
    _all: number
  }


  export type GerantEmployeeAssignmentMinAggregateInputType = {
    id?: true
    gerant_id?: true
    employee_id?: true
    created_at?: true
  }

  export type GerantEmployeeAssignmentMaxAggregateInputType = {
    id?: true
    gerant_id?: true
    employee_id?: true
    created_at?: true
  }

  export type GerantEmployeeAssignmentCountAggregateInputType = {
    id?: true
    gerant_id?: true
    employee_id?: true
    created_at?: true
    _all?: true
  }

  export type GerantEmployeeAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GerantEmployeeAssignment to aggregate.
     */
    where?: GerantEmployeeAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GerantEmployeeAssignments to fetch.
     */
    orderBy?: GerantEmployeeAssignmentOrderByWithRelationInput | GerantEmployeeAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GerantEmployeeAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GerantEmployeeAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GerantEmployeeAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GerantEmployeeAssignments
    **/
    _count?: true | GerantEmployeeAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GerantEmployeeAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GerantEmployeeAssignmentMaxAggregateInputType
  }

  export type GetGerantEmployeeAssignmentAggregateType<T extends GerantEmployeeAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateGerantEmployeeAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGerantEmployeeAssignment[P]>
      : GetScalarType<T[P], AggregateGerantEmployeeAssignment[P]>
  }




  export type GerantEmployeeAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GerantEmployeeAssignmentWhereInput
    orderBy?: GerantEmployeeAssignmentOrderByWithAggregationInput | GerantEmployeeAssignmentOrderByWithAggregationInput[]
    by: GerantEmployeeAssignmentScalarFieldEnum[] | GerantEmployeeAssignmentScalarFieldEnum
    having?: GerantEmployeeAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GerantEmployeeAssignmentCountAggregateInputType | true
    _min?: GerantEmployeeAssignmentMinAggregateInputType
    _max?: GerantEmployeeAssignmentMaxAggregateInputType
  }

  export type GerantEmployeeAssignmentGroupByOutputType = {
    id: string
    gerant_id: string
    employee_id: string
    created_at: Date
    _count: GerantEmployeeAssignmentCountAggregateOutputType | null
    _min: GerantEmployeeAssignmentMinAggregateOutputType | null
    _max: GerantEmployeeAssignmentMaxAggregateOutputType | null
  }

  type GetGerantEmployeeAssignmentGroupByPayload<T extends GerantEmployeeAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GerantEmployeeAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GerantEmployeeAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GerantEmployeeAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], GerantEmployeeAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type GerantEmployeeAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gerant_id?: boolean
    employee_id?: boolean
    created_at?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    gerant?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gerantEmployeeAssignment"]>



  export type GerantEmployeeAssignmentSelectScalar = {
    id?: boolean
    gerant_id?: boolean
    employee_id?: boolean
    created_at?: boolean
  }

  export type GerantEmployeeAssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "gerant_id" | "employee_id" | "created_at", ExtArgs["result"]["gerantEmployeeAssignment"]>
  export type GerantEmployeeAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    gerant?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GerantEmployeeAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GerantEmployeeAssignment"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      gerant: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      gerant_id: string
      employee_id: string
      created_at: Date
    }, ExtArgs["result"]["gerantEmployeeAssignment"]>
    composites: {}
  }

  type GerantEmployeeAssignmentGetPayload<S extends boolean | null | undefined | GerantEmployeeAssignmentDefaultArgs> = $Result.GetResult<Prisma.$GerantEmployeeAssignmentPayload, S>

  type GerantEmployeeAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GerantEmployeeAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GerantEmployeeAssignmentCountAggregateInputType | true
    }

  export interface GerantEmployeeAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GerantEmployeeAssignment'], meta: { name: 'GerantEmployeeAssignment' } }
    /**
     * Find zero or one GerantEmployeeAssignment that matches the filter.
     * @param {GerantEmployeeAssignmentFindUniqueArgs} args - Arguments to find a GerantEmployeeAssignment
     * @example
     * // Get one GerantEmployeeAssignment
     * const gerantEmployeeAssignment = await prisma.gerantEmployeeAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GerantEmployeeAssignmentFindUniqueArgs>(args: SelectSubset<T, GerantEmployeeAssignmentFindUniqueArgs<ExtArgs>>): Prisma__GerantEmployeeAssignmentClient<$Result.GetResult<Prisma.$GerantEmployeeAssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GerantEmployeeAssignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GerantEmployeeAssignmentFindUniqueOrThrowArgs} args - Arguments to find a GerantEmployeeAssignment
     * @example
     * // Get one GerantEmployeeAssignment
     * const gerantEmployeeAssignment = await prisma.gerantEmployeeAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GerantEmployeeAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, GerantEmployeeAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GerantEmployeeAssignmentClient<$Result.GetResult<Prisma.$GerantEmployeeAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GerantEmployeeAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GerantEmployeeAssignmentFindFirstArgs} args - Arguments to find a GerantEmployeeAssignment
     * @example
     * // Get one GerantEmployeeAssignment
     * const gerantEmployeeAssignment = await prisma.gerantEmployeeAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GerantEmployeeAssignmentFindFirstArgs>(args?: SelectSubset<T, GerantEmployeeAssignmentFindFirstArgs<ExtArgs>>): Prisma__GerantEmployeeAssignmentClient<$Result.GetResult<Prisma.$GerantEmployeeAssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GerantEmployeeAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GerantEmployeeAssignmentFindFirstOrThrowArgs} args - Arguments to find a GerantEmployeeAssignment
     * @example
     * // Get one GerantEmployeeAssignment
     * const gerantEmployeeAssignment = await prisma.gerantEmployeeAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GerantEmployeeAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, GerantEmployeeAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__GerantEmployeeAssignmentClient<$Result.GetResult<Prisma.$GerantEmployeeAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GerantEmployeeAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GerantEmployeeAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GerantEmployeeAssignments
     * const gerantEmployeeAssignments = await prisma.gerantEmployeeAssignment.findMany()
     * 
     * // Get first 10 GerantEmployeeAssignments
     * const gerantEmployeeAssignments = await prisma.gerantEmployeeAssignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gerantEmployeeAssignmentWithIdOnly = await prisma.gerantEmployeeAssignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GerantEmployeeAssignmentFindManyArgs>(args?: SelectSubset<T, GerantEmployeeAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GerantEmployeeAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GerantEmployeeAssignment.
     * @param {GerantEmployeeAssignmentCreateArgs} args - Arguments to create a GerantEmployeeAssignment.
     * @example
     * // Create one GerantEmployeeAssignment
     * const GerantEmployeeAssignment = await prisma.gerantEmployeeAssignment.create({
     *   data: {
     *     // ... data to create a GerantEmployeeAssignment
     *   }
     * })
     * 
     */
    create<T extends GerantEmployeeAssignmentCreateArgs>(args: SelectSubset<T, GerantEmployeeAssignmentCreateArgs<ExtArgs>>): Prisma__GerantEmployeeAssignmentClient<$Result.GetResult<Prisma.$GerantEmployeeAssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GerantEmployeeAssignments.
     * @param {GerantEmployeeAssignmentCreateManyArgs} args - Arguments to create many GerantEmployeeAssignments.
     * @example
     * // Create many GerantEmployeeAssignments
     * const gerantEmployeeAssignment = await prisma.gerantEmployeeAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GerantEmployeeAssignmentCreateManyArgs>(args?: SelectSubset<T, GerantEmployeeAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GerantEmployeeAssignment.
     * @param {GerantEmployeeAssignmentDeleteArgs} args - Arguments to delete one GerantEmployeeAssignment.
     * @example
     * // Delete one GerantEmployeeAssignment
     * const GerantEmployeeAssignment = await prisma.gerantEmployeeAssignment.delete({
     *   where: {
     *     // ... filter to delete one GerantEmployeeAssignment
     *   }
     * })
     * 
     */
    delete<T extends GerantEmployeeAssignmentDeleteArgs>(args: SelectSubset<T, GerantEmployeeAssignmentDeleteArgs<ExtArgs>>): Prisma__GerantEmployeeAssignmentClient<$Result.GetResult<Prisma.$GerantEmployeeAssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GerantEmployeeAssignment.
     * @param {GerantEmployeeAssignmentUpdateArgs} args - Arguments to update one GerantEmployeeAssignment.
     * @example
     * // Update one GerantEmployeeAssignment
     * const gerantEmployeeAssignment = await prisma.gerantEmployeeAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GerantEmployeeAssignmentUpdateArgs>(args: SelectSubset<T, GerantEmployeeAssignmentUpdateArgs<ExtArgs>>): Prisma__GerantEmployeeAssignmentClient<$Result.GetResult<Prisma.$GerantEmployeeAssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GerantEmployeeAssignments.
     * @param {GerantEmployeeAssignmentDeleteManyArgs} args - Arguments to filter GerantEmployeeAssignments to delete.
     * @example
     * // Delete a few GerantEmployeeAssignments
     * const { count } = await prisma.gerantEmployeeAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GerantEmployeeAssignmentDeleteManyArgs>(args?: SelectSubset<T, GerantEmployeeAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GerantEmployeeAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GerantEmployeeAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GerantEmployeeAssignments
     * const gerantEmployeeAssignment = await prisma.gerantEmployeeAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GerantEmployeeAssignmentUpdateManyArgs>(args: SelectSubset<T, GerantEmployeeAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GerantEmployeeAssignment.
     * @param {GerantEmployeeAssignmentUpsertArgs} args - Arguments to update or create a GerantEmployeeAssignment.
     * @example
     * // Update or create a GerantEmployeeAssignment
     * const gerantEmployeeAssignment = await prisma.gerantEmployeeAssignment.upsert({
     *   create: {
     *     // ... data to create a GerantEmployeeAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GerantEmployeeAssignment we want to update
     *   }
     * })
     */
    upsert<T extends GerantEmployeeAssignmentUpsertArgs>(args: SelectSubset<T, GerantEmployeeAssignmentUpsertArgs<ExtArgs>>): Prisma__GerantEmployeeAssignmentClient<$Result.GetResult<Prisma.$GerantEmployeeAssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GerantEmployeeAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GerantEmployeeAssignmentCountArgs} args - Arguments to filter GerantEmployeeAssignments to count.
     * @example
     * // Count the number of GerantEmployeeAssignments
     * const count = await prisma.gerantEmployeeAssignment.count({
     *   where: {
     *     // ... the filter for the GerantEmployeeAssignments we want to count
     *   }
     * })
    **/
    count<T extends GerantEmployeeAssignmentCountArgs>(
      args?: Subset<T, GerantEmployeeAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GerantEmployeeAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GerantEmployeeAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GerantEmployeeAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GerantEmployeeAssignmentAggregateArgs>(args: Subset<T, GerantEmployeeAssignmentAggregateArgs>): Prisma.PrismaPromise<GetGerantEmployeeAssignmentAggregateType<T>>

    /**
     * Group by GerantEmployeeAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GerantEmployeeAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GerantEmployeeAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GerantEmployeeAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: GerantEmployeeAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GerantEmployeeAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGerantEmployeeAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GerantEmployeeAssignment model
   */
  readonly fields: GerantEmployeeAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GerantEmployeeAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GerantEmployeeAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    gerant<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GerantEmployeeAssignment model
   */
  interface GerantEmployeeAssignmentFieldRefs {
    readonly id: FieldRef<"GerantEmployeeAssignment", 'String'>
    readonly gerant_id: FieldRef<"GerantEmployeeAssignment", 'String'>
    readonly employee_id: FieldRef<"GerantEmployeeAssignment", 'String'>
    readonly created_at: FieldRef<"GerantEmployeeAssignment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GerantEmployeeAssignment findUnique
   */
  export type GerantEmployeeAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GerantEmployeeAssignment
     */
    select?: GerantEmployeeAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GerantEmployeeAssignment
     */
    omit?: GerantEmployeeAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GerantEmployeeAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which GerantEmployeeAssignment to fetch.
     */
    where: GerantEmployeeAssignmentWhereUniqueInput
  }

  /**
   * GerantEmployeeAssignment findUniqueOrThrow
   */
  export type GerantEmployeeAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GerantEmployeeAssignment
     */
    select?: GerantEmployeeAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GerantEmployeeAssignment
     */
    omit?: GerantEmployeeAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GerantEmployeeAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which GerantEmployeeAssignment to fetch.
     */
    where: GerantEmployeeAssignmentWhereUniqueInput
  }

  /**
   * GerantEmployeeAssignment findFirst
   */
  export type GerantEmployeeAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GerantEmployeeAssignment
     */
    select?: GerantEmployeeAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GerantEmployeeAssignment
     */
    omit?: GerantEmployeeAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GerantEmployeeAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which GerantEmployeeAssignment to fetch.
     */
    where?: GerantEmployeeAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GerantEmployeeAssignments to fetch.
     */
    orderBy?: GerantEmployeeAssignmentOrderByWithRelationInput | GerantEmployeeAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GerantEmployeeAssignments.
     */
    cursor?: GerantEmployeeAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GerantEmployeeAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GerantEmployeeAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GerantEmployeeAssignments.
     */
    distinct?: GerantEmployeeAssignmentScalarFieldEnum | GerantEmployeeAssignmentScalarFieldEnum[]
  }

  /**
   * GerantEmployeeAssignment findFirstOrThrow
   */
  export type GerantEmployeeAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GerantEmployeeAssignment
     */
    select?: GerantEmployeeAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GerantEmployeeAssignment
     */
    omit?: GerantEmployeeAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GerantEmployeeAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which GerantEmployeeAssignment to fetch.
     */
    where?: GerantEmployeeAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GerantEmployeeAssignments to fetch.
     */
    orderBy?: GerantEmployeeAssignmentOrderByWithRelationInput | GerantEmployeeAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GerantEmployeeAssignments.
     */
    cursor?: GerantEmployeeAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GerantEmployeeAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GerantEmployeeAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GerantEmployeeAssignments.
     */
    distinct?: GerantEmployeeAssignmentScalarFieldEnum | GerantEmployeeAssignmentScalarFieldEnum[]
  }

  /**
   * GerantEmployeeAssignment findMany
   */
  export type GerantEmployeeAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GerantEmployeeAssignment
     */
    select?: GerantEmployeeAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GerantEmployeeAssignment
     */
    omit?: GerantEmployeeAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GerantEmployeeAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which GerantEmployeeAssignments to fetch.
     */
    where?: GerantEmployeeAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GerantEmployeeAssignments to fetch.
     */
    orderBy?: GerantEmployeeAssignmentOrderByWithRelationInput | GerantEmployeeAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GerantEmployeeAssignments.
     */
    cursor?: GerantEmployeeAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GerantEmployeeAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GerantEmployeeAssignments.
     */
    skip?: number
    distinct?: GerantEmployeeAssignmentScalarFieldEnum | GerantEmployeeAssignmentScalarFieldEnum[]
  }

  /**
   * GerantEmployeeAssignment create
   */
  export type GerantEmployeeAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GerantEmployeeAssignment
     */
    select?: GerantEmployeeAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GerantEmployeeAssignment
     */
    omit?: GerantEmployeeAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GerantEmployeeAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a GerantEmployeeAssignment.
     */
    data: XOR<GerantEmployeeAssignmentCreateInput, GerantEmployeeAssignmentUncheckedCreateInput>
  }

  /**
   * GerantEmployeeAssignment createMany
   */
  export type GerantEmployeeAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GerantEmployeeAssignments.
     */
    data: GerantEmployeeAssignmentCreateManyInput | GerantEmployeeAssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GerantEmployeeAssignment update
   */
  export type GerantEmployeeAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GerantEmployeeAssignment
     */
    select?: GerantEmployeeAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GerantEmployeeAssignment
     */
    omit?: GerantEmployeeAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GerantEmployeeAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a GerantEmployeeAssignment.
     */
    data: XOR<GerantEmployeeAssignmentUpdateInput, GerantEmployeeAssignmentUncheckedUpdateInput>
    /**
     * Choose, which GerantEmployeeAssignment to update.
     */
    where: GerantEmployeeAssignmentWhereUniqueInput
  }

  /**
   * GerantEmployeeAssignment updateMany
   */
  export type GerantEmployeeAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GerantEmployeeAssignments.
     */
    data: XOR<GerantEmployeeAssignmentUpdateManyMutationInput, GerantEmployeeAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which GerantEmployeeAssignments to update
     */
    where?: GerantEmployeeAssignmentWhereInput
    /**
     * Limit how many GerantEmployeeAssignments to update.
     */
    limit?: number
  }

  /**
   * GerantEmployeeAssignment upsert
   */
  export type GerantEmployeeAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GerantEmployeeAssignment
     */
    select?: GerantEmployeeAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GerantEmployeeAssignment
     */
    omit?: GerantEmployeeAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GerantEmployeeAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the GerantEmployeeAssignment to update in case it exists.
     */
    where: GerantEmployeeAssignmentWhereUniqueInput
    /**
     * In case the GerantEmployeeAssignment found by the `where` argument doesn't exist, create a new GerantEmployeeAssignment with this data.
     */
    create: XOR<GerantEmployeeAssignmentCreateInput, GerantEmployeeAssignmentUncheckedCreateInput>
    /**
     * In case the GerantEmployeeAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GerantEmployeeAssignmentUpdateInput, GerantEmployeeAssignmentUncheckedUpdateInput>
  }

  /**
   * GerantEmployeeAssignment delete
   */
  export type GerantEmployeeAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GerantEmployeeAssignment
     */
    select?: GerantEmployeeAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GerantEmployeeAssignment
     */
    omit?: GerantEmployeeAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GerantEmployeeAssignmentInclude<ExtArgs> | null
    /**
     * Filter which GerantEmployeeAssignment to delete.
     */
    where: GerantEmployeeAssignmentWhereUniqueInput
  }

  /**
   * GerantEmployeeAssignment deleteMany
   */
  export type GerantEmployeeAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GerantEmployeeAssignments to delete
     */
    where?: GerantEmployeeAssignmentWhereInput
    /**
     * Limit how many GerantEmployeeAssignments to delete.
     */
    limit?: number
  }

  /**
   * GerantEmployeeAssignment without action
   */
  export type GerantEmployeeAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GerantEmployeeAssignment
     */
    select?: GerantEmployeeAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GerantEmployeeAssignment
     */
    omit?: GerantEmployeeAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GerantEmployeeAssignmentInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ArticleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    price: 'price',
    category_id: 'category_id',
    collisage: 'collisage',
    type: 'type',
    numero: 'numero',
    quantite_a_demander: 'quantite_a_demander',
    quantite_a_stocker: 'quantite_a_stocker'
  };

  export type ArticleScalarFieldEnum = (typeof ArticleScalarFieldEnum)[keyof typeof ArticleScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const BonDeCommandeCategoryScalarFieldEnum: {
    id: 'id',
    category_id: 'category_id',
    bon_de_commande_id: 'bon_de_commande_id',
    article_id: 'article_id',
    quantite_a_demander: 'quantite_a_demander',
    quantite_a_stocker: 'quantite_a_stocker'
  };

  export type BonDeCommandeCategoryScalarFieldEnum = (typeof BonDeCommandeCategoryScalarFieldEnum)[keyof typeof BonDeCommandeCategoryScalarFieldEnum]


  export const BonDeCommandeScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    description: 'description',
    status: 'status',
    employee_id: 'employee_id',
    code: 'code',
    target_date: 'target_date'
  };

  export type BonDeCommandeScalarFieldEnum = (typeof BonDeCommandeScalarFieldEnum)[keyof typeof BonDeCommandeScalarFieldEnum]


  export const EmployeeScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    role_id: 'role_id',
    refreshToken: 'refreshToken'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const GerantEmployeeAssignmentScalarFieldEnum: {
    id: 'id',
    gerant_id: 'gerant_id',
    employee_id: 'employee_id',
    created_at: 'created_at'
  };

  export type GerantEmployeeAssignmentScalarFieldEnum = (typeof GerantEmployeeAssignmentScalarFieldEnum)[keyof typeof GerantEmployeeAssignmentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const ArticleOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    category_id: 'category_id',
    collisage: 'collisage',
    type: 'type'
  };

  export type ArticleOrderByRelevanceFieldEnum = (typeof ArticleOrderByRelevanceFieldEnum)[keyof typeof ArticleOrderByRelevanceFieldEnum]


  export const CategoryOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type CategoryOrderByRelevanceFieldEnum = (typeof CategoryOrderByRelevanceFieldEnum)[keyof typeof CategoryOrderByRelevanceFieldEnum]


  export const BonDeCommandeCategoryOrderByRelevanceFieldEnum: {
    id: 'id',
    category_id: 'category_id',
    bon_de_commande_id: 'bon_de_commande_id',
    article_id: 'article_id'
  };

  export type BonDeCommandeCategoryOrderByRelevanceFieldEnum = (typeof BonDeCommandeCategoryOrderByRelevanceFieldEnum)[keyof typeof BonDeCommandeCategoryOrderByRelevanceFieldEnum]


  export const BonDeCommandeOrderByRelevanceFieldEnum: {
    id: 'id',
    description: 'description',
    status: 'status',
    employee_id: 'employee_id',
    code: 'code'
  };

  export type BonDeCommandeOrderByRelevanceFieldEnum = (typeof BonDeCommandeOrderByRelevanceFieldEnum)[keyof typeof BonDeCommandeOrderByRelevanceFieldEnum]


  export const EmployeeOrderByRelevanceFieldEnum: {
    id: 'id',
    user_id: 'user_id'
  };

  export type EmployeeOrderByRelevanceFieldEnum = (typeof EmployeeOrderByRelevanceFieldEnum)[keyof typeof EmployeeOrderByRelevanceFieldEnum]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    role_id: 'role_id',
    refreshToken: 'refreshToken'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const RoleOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type RoleOrderByRelevanceFieldEnum = (typeof RoleOrderByRelevanceFieldEnum)[keyof typeof RoleOrderByRelevanceFieldEnum]


  export const AdminOrderByRelevanceFieldEnum: {
    id: 'id',
    user_id: 'user_id'
  };

  export type AdminOrderByRelevanceFieldEnum = (typeof AdminOrderByRelevanceFieldEnum)[keyof typeof AdminOrderByRelevanceFieldEnum]


  export const GerantEmployeeAssignmentOrderByRelevanceFieldEnum: {
    id: 'id',
    gerant_id: 'gerant_id',
    employee_id: 'employee_id'
  };

  export type GerantEmployeeAssignmentOrderByRelevanceFieldEnum = (typeof GerantEmployeeAssignmentOrderByRelevanceFieldEnum)[keyof typeof GerantEmployeeAssignmentOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type ArticleWhereInput = {
    AND?: ArticleWhereInput | ArticleWhereInput[]
    OR?: ArticleWhereInput[]
    NOT?: ArticleWhereInput | ArticleWhereInput[]
    id?: StringFilter<"Article"> | string
    name?: StringFilter<"Article"> | string
    description?: StringNullableFilter<"Article"> | string | null
    price?: DecimalNullableFilter<"Article"> | Decimal | DecimalJsLike | number | string | null
    category_id?: StringFilter<"Article"> | string
    collisage?: StringFilter<"Article"> | string
    type?: StringFilter<"Article"> | string
    numero?: IntNullableFilter<"Article"> | number | null
    quantite_a_demander?: DecimalNullableFilter<"Article"> | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: DecimalNullableFilter<"Article"> | Decimal | DecimalJsLike | number | string | null
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    bon_de_commande_categories?: BonDeCommandeCategoryListRelationFilter
  }

  export type ArticleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    category_id?: SortOrder
    collisage?: SortOrder
    type?: SortOrder
    numero?: SortOrderInput | SortOrder
    quantite_a_demander?: SortOrderInput | SortOrder
    quantite_a_stocker?: SortOrderInput | SortOrder
    category?: CategoryOrderByWithRelationInput
    bon_de_commande_categories?: BonDeCommandeCategoryOrderByRelationAggregateInput
    _relevance?: ArticleOrderByRelevanceInput
  }

  export type ArticleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ArticleWhereInput | ArticleWhereInput[]
    OR?: ArticleWhereInput[]
    NOT?: ArticleWhereInput | ArticleWhereInput[]
    name?: StringFilter<"Article"> | string
    description?: StringNullableFilter<"Article"> | string | null
    price?: DecimalNullableFilter<"Article"> | Decimal | DecimalJsLike | number | string | null
    category_id?: StringFilter<"Article"> | string
    collisage?: StringFilter<"Article"> | string
    type?: StringFilter<"Article"> | string
    numero?: IntNullableFilter<"Article"> | number | null
    quantite_a_demander?: DecimalNullableFilter<"Article"> | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: DecimalNullableFilter<"Article"> | Decimal | DecimalJsLike | number | string | null
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    bon_de_commande_categories?: BonDeCommandeCategoryListRelationFilter
  }, "id">

  export type ArticleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    category_id?: SortOrder
    collisage?: SortOrder
    type?: SortOrder
    numero?: SortOrderInput | SortOrder
    quantite_a_demander?: SortOrderInput | SortOrder
    quantite_a_stocker?: SortOrderInput | SortOrder
    _count?: ArticleCountOrderByAggregateInput
    _avg?: ArticleAvgOrderByAggregateInput
    _max?: ArticleMaxOrderByAggregateInput
    _min?: ArticleMinOrderByAggregateInput
    _sum?: ArticleSumOrderByAggregateInput
  }

  export type ArticleScalarWhereWithAggregatesInput = {
    AND?: ArticleScalarWhereWithAggregatesInput | ArticleScalarWhereWithAggregatesInput[]
    OR?: ArticleScalarWhereWithAggregatesInput[]
    NOT?: ArticleScalarWhereWithAggregatesInput | ArticleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Article"> | string
    name?: StringWithAggregatesFilter<"Article"> | string
    description?: StringNullableWithAggregatesFilter<"Article"> | string | null
    price?: DecimalNullableWithAggregatesFilter<"Article"> | Decimal | DecimalJsLike | number | string | null
    category_id?: StringWithAggregatesFilter<"Article"> | string
    collisage?: StringWithAggregatesFilter<"Article"> | string
    type?: StringWithAggregatesFilter<"Article"> | string
    numero?: IntNullableWithAggregatesFilter<"Article"> | number | null
    quantite_a_demander?: DecimalNullableWithAggregatesFilter<"Article"> | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: DecimalNullableWithAggregatesFilter<"Article"> | Decimal | DecimalJsLike | number | string | null
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    articles?: ArticleListRelationFilter
    commandes?: BonDeCommandeCategoryListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    articles?: ArticleOrderByRelationAggregateInput
    commandes?: BonDeCommandeCategoryOrderByRelationAggregateInput
    _relevance?: CategoryOrderByRelevanceInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    name?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    articles?: ArticleListRelationFilter
    commandes?: BonDeCommandeCategoryListRelationFilter
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
    description?: StringNullableWithAggregatesFilter<"Category"> | string | null
  }

  export type BonDeCommandeCategoryWhereInput = {
    AND?: BonDeCommandeCategoryWhereInput | BonDeCommandeCategoryWhereInput[]
    OR?: BonDeCommandeCategoryWhereInput[]
    NOT?: BonDeCommandeCategoryWhereInput | BonDeCommandeCategoryWhereInput[]
    id?: StringFilter<"BonDeCommandeCategory"> | string
    category_id?: StringFilter<"BonDeCommandeCategory"> | string
    bon_de_commande_id?: StringFilter<"BonDeCommandeCategory"> | string
    article_id?: StringNullableFilter<"BonDeCommandeCategory"> | string | null
    quantite_a_demander?: DecimalNullableFilter<"BonDeCommandeCategory"> | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: DecimalNullableFilter<"BonDeCommandeCategory"> | Decimal | DecimalJsLike | number | string | null
    article?: XOR<ArticleNullableScalarRelationFilter, ArticleWhereInput> | null
    bon_de_commande?: XOR<BonDeCommandeScalarRelationFilter, BonDeCommandeWhereInput>
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
  }

  export type BonDeCommandeCategoryOrderByWithRelationInput = {
    id?: SortOrder
    category_id?: SortOrder
    bon_de_commande_id?: SortOrder
    article_id?: SortOrderInput | SortOrder
    quantite_a_demander?: SortOrderInput | SortOrder
    quantite_a_stocker?: SortOrderInput | SortOrder
    article?: ArticleOrderByWithRelationInput
    bon_de_commande?: BonDeCommandeOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
    _relevance?: BonDeCommandeCategoryOrderByRelevanceInput
  }

  export type BonDeCommandeCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BonDeCommandeCategoryWhereInput | BonDeCommandeCategoryWhereInput[]
    OR?: BonDeCommandeCategoryWhereInput[]
    NOT?: BonDeCommandeCategoryWhereInput | BonDeCommandeCategoryWhereInput[]
    category_id?: StringFilter<"BonDeCommandeCategory"> | string
    bon_de_commande_id?: StringFilter<"BonDeCommandeCategory"> | string
    article_id?: StringNullableFilter<"BonDeCommandeCategory"> | string | null
    quantite_a_demander?: DecimalNullableFilter<"BonDeCommandeCategory"> | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: DecimalNullableFilter<"BonDeCommandeCategory"> | Decimal | DecimalJsLike | number | string | null
    article?: XOR<ArticleNullableScalarRelationFilter, ArticleWhereInput> | null
    bon_de_commande?: XOR<BonDeCommandeScalarRelationFilter, BonDeCommandeWhereInput>
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
  }, "id">

  export type BonDeCommandeCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    category_id?: SortOrder
    bon_de_commande_id?: SortOrder
    article_id?: SortOrderInput | SortOrder
    quantite_a_demander?: SortOrderInput | SortOrder
    quantite_a_stocker?: SortOrderInput | SortOrder
    _count?: BonDeCommandeCategoryCountOrderByAggregateInput
    _avg?: BonDeCommandeCategoryAvgOrderByAggregateInput
    _max?: BonDeCommandeCategoryMaxOrderByAggregateInput
    _min?: BonDeCommandeCategoryMinOrderByAggregateInput
    _sum?: BonDeCommandeCategorySumOrderByAggregateInput
  }

  export type BonDeCommandeCategoryScalarWhereWithAggregatesInput = {
    AND?: BonDeCommandeCategoryScalarWhereWithAggregatesInput | BonDeCommandeCategoryScalarWhereWithAggregatesInput[]
    OR?: BonDeCommandeCategoryScalarWhereWithAggregatesInput[]
    NOT?: BonDeCommandeCategoryScalarWhereWithAggregatesInput | BonDeCommandeCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BonDeCommandeCategory"> | string
    category_id?: StringWithAggregatesFilter<"BonDeCommandeCategory"> | string
    bon_de_commande_id?: StringWithAggregatesFilter<"BonDeCommandeCategory"> | string
    article_id?: StringNullableWithAggregatesFilter<"BonDeCommandeCategory"> | string | null
    quantite_a_demander?: DecimalNullableWithAggregatesFilter<"BonDeCommandeCategory"> | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: DecimalNullableWithAggregatesFilter<"BonDeCommandeCategory"> | Decimal | DecimalJsLike | number | string | null
  }

  export type BonDeCommandeWhereInput = {
    AND?: BonDeCommandeWhereInput | BonDeCommandeWhereInput[]
    OR?: BonDeCommandeWhereInput[]
    NOT?: BonDeCommandeWhereInput | BonDeCommandeWhereInput[]
    id?: StringFilter<"BonDeCommande"> | string
    created_at?: DateTimeFilter<"BonDeCommande"> | Date | string
    description?: StringFilter<"BonDeCommande"> | string
    status?: StringFilter<"BonDeCommande"> | string
    employee_id?: StringFilter<"BonDeCommande"> | string
    code?: StringFilter<"BonDeCommande"> | string
    target_date?: DateTimeFilter<"BonDeCommande"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    categories?: BonDeCommandeCategoryListRelationFilter
  }

  export type BonDeCommandeOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    description?: SortOrder
    status?: SortOrder
    employee_id?: SortOrder
    code?: SortOrder
    target_date?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    categories?: BonDeCommandeCategoryOrderByRelationAggregateInput
    _relevance?: BonDeCommandeOrderByRelevanceInput
  }

  export type BonDeCommandeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: BonDeCommandeWhereInput | BonDeCommandeWhereInput[]
    OR?: BonDeCommandeWhereInput[]
    NOT?: BonDeCommandeWhereInput | BonDeCommandeWhereInput[]
    created_at?: DateTimeFilter<"BonDeCommande"> | Date | string
    description?: StringFilter<"BonDeCommande"> | string
    status?: StringFilter<"BonDeCommande"> | string
    employee_id?: StringFilter<"BonDeCommande"> | string
    target_date?: DateTimeFilter<"BonDeCommande"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    categories?: BonDeCommandeCategoryListRelationFilter
  }, "id" | "code">

  export type BonDeCommandeOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    description?: SortOrder
    status?: SortOrder
    employee_id?: SortOrder
    code?: SortOrder
    target_date?: SortOrder
    _count?: BonDeCommandeCountOrderByAggregateInput
    _max?: BonDeCommandeMaxOrderByAggregateInput
    _min?: BonDeCommandeMinOrderByAggregateInput
  }

  export type BonDeCommandeScalarWhereWithAggregatesInput = {
    AND?: BonDeCommandeScalarWhereWithAggregatesInput | BonDeCommandeScalarWhereWithAggregatesInput[]
    OR?: BonDeCommandeScalarWhereWithAggregatesInput[]
    NOT?: BonDeCommandeScalarWhereWithAggregatesInput | BonDeCommandeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BonDeCommande"> | string
    created_at?: DateTimeWithAggregatesFilter<"BonDeCommande"> | Date | string
    description?: StringWithAggregatesFilter<"BonDeCommande"> | string
    status?: StringWithAggregatesFilter<"BonDeCommande"> | string
    employee_id?: StringWithAggregatesFilter<"BonDeCommande"> | string
    code?: StringWithAggregatesFilter<"BonDeCommande"> | string
    target_date?: DateTimeWithAggregatesFilter<"BonDeCommande"> | Date | string
  }

  export type EmployeeWhereInput = {
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    id?: StringFilter<"Employee"> | string
    user_id?: StringFilter<"Employee"> | string
    bons_de_commande?: BonDeCommandeListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    gerant_assignments?: GerantEmployeeAssignmentListRelationFilter
  }

  export type EmployeeOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    bons_de_commande?: BonDeCommandeOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    gerant_assignments?: GerantEmployeeAssignmentOrderByRelationAggregateInput
    _relevance?: EmployeeOrderByRelevanceInput
  }

  export type EmployeeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    user_id?: string
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    bons_de_commande?: BonDeCommandeListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    gerant_assignments?: GerantEmployeeAssignmentListRelationFilter
  }, "id" | "user_id">

  export type EmployeeOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    _count?: EmployeeCountOrderByAggregateInput
    _max?: EmployeeMaxOrderByAggregateInput
    _min?: EmployeeMinOrderByAggregateInput
  }

  export type EmployeeScalarWhereWithAggregatesInput = {
    AND?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    OR?: EmployeeScalarWhereWithAggregatesInput[]
    NOT?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Employee"> | string
    user_id?: StringWithAggregatesFilter<"Employee"> | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role_id?: StringFilter<"User"> | string
    refreshToken?: StringNullableFilter<"User"> | string | null
    admin?: XOR<AdminNullableScalarRelationFilter, AdminWhereInput> | null
    employee?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
    gerant_assignments?: GerantEmployeeAssignmentListRelationFilter
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    admin?: AdminOrderByWithRelationInput
    employee?: EmployeeOrderByWithRelationInput
    gerant_assignments?: GerantEmployeeAssignmentOrderByRelationAggregateInput
    role?: RoleOrderByWithRelationInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role_id?: StringFilter<"User"> | string
    refreshToken?: StringNullableFilter<"User"> | string | null
    admin?: XOR<AdminNullableScalarRelationFilter, AdminWhereInput> | null
    employee?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
    gerant_assignments?: GerantEmployeeAssignmentListRelationFilter
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role_id?: StringWithAggregatesFilter<"User"> | string
    refreshToken?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: StringFilter<"Role"> | string
    name?: StringFilter<"Role"> | string
    users?: UserListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    users?: UserOrderByRelationAggregateInput
    _relevance?: RoleOrderByRelevanceInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    users?: UserListRelationFilter
  }, "id" | "name">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Role"> | string
    name?: StringWithAggregatesFilter<"Role"> | string
  }

  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: StringFilter<"Admin"> | string
    user_id?: StringFilter<"Admin"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: AdminOrderByRelevanceInput
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    user_id?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "user_id">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Admin"> | string
    user_id?: StringWithAggregatesFilter<"Admin"> | string
  }

  export type GerantEmployeeAssignmentWhereInput = {
    AND?: GerantEmployeeAssignmentWhereInput | GerantEmployeeAssignmentWhereInput[]
    OR?: GerantEmployeeAssignmentWhereInput[]
    NOT?: GerantEmployeeAssignmentWhereInput | GerantEmployeeAssignmentWhereInput[]
    id?: StringFilter<"GerantEmployeeAssignment"> | string
    gerant_id?: StringFilter<"GerantEmployeeAssignment"> | string
    employee_id?: StringFilter<"GerantEmployeeAssignment"> | string
    created_at?: DateTimeFilter<"GerantEmployeeAssignment"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    gerant?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type GerantEmployeeAssignmentOrderByWithRelationInput = {
    id?: SortOrder
    gerant_id?: SortOrder
    employee_id?: SortOrder
    created_at?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    gerant?: UserOrderByWithRelationInput
    _relevance?: GerantEmployeeAssignmentOrderByRelevanceInput
  }

  export type GerantEmployeeAssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    gerant_id_employee_id?: GerantEmployeeAssignmentGerant_idEmployee_idCompoundUniqueInput
    AND?: GerantEmployeeAssignmentWhereInput | GerantEmployeeAssignmentWhereInput[]
    OR?: GerantEmployeeAssignmentWhereInput[]
    NOT?: GerantEmployeeAssignmentWhereInput | GerantEmployeeAssignmentWhereInput[]
    gerant_id?: StringFilter<"GerantEmployeeAssignment"> | string
    employee_id?: StringFilter<"GerantEmployeeAssignment"> | string
    created_at?: DateTimeFilter<"GerantEmployeeAssignment"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    gerant?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "gerant_id_employee_id">

  export type GerantEmployeeAssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    gerant_id?: SortOrder
    employee_id?: SortOrder
    created_at?: SortOrder
    _count?: GerantEmployeeAssignmentCountOrderByAggregateInput
    _max?: GerantEmployeeAssignmentMaxOrderByAggregateInput
    _min?: GerantEmployeeAssignmentMinOrderByAggregateInput
  }

  export type GerantEmployeeAssignmentScalarWhereWithAggregatesInput = {
    AND?: GerantEmployeeAssignmentScalarWhereWithAggregatesInput | GerantEmployeeAssignmentScalarWhereWithAggregatesInput[]
    OR?: GerantEmployeeAssignmentScalarWhereWithAggregatesInput[]
    NOT?: GerantEmployeeAssignmentScalarWhereWithAggregatesInput | GerantEmployeeAssignmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GerantEmployeeAssignment"> | string
    gerant_id?: StringWithAggregatesFilter<"GerantEmployeeAssignment"> | string
    employee_id?: StringWithAggregatesFilter<"GerantEmployeeAssignment"> | string
    created_at?: DateTimeWithAggregatesFilter<"GerantEmployeeAssignment"> | Date | string
  }

  export type ArticleCreateInput = {
    id?: string
    name: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    collisage: string
    type?: string
    numero?: number | null
    quantite_a_demander?: Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: Decimal | DecimalJsLike | number | string | null
    category: CategoryCreateNestedOneWithoutArticlesInput
    bon_de_commande_categories?: BonDeCommandeCategoryCreateNestedManyWithoutArticleInput
  }

  export type ArticleUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    category_id: string
    collisage: string
    type?: string
    numero?: number | null
    quantite_a_demander?: Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: Decimal | DecimalJsLike | number | string | null
    bon_de_commande_categories?: BonDeCommandeCategoryUncheckedCreateNestedManyWithoutArticleInput
  }

  export type ArticleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    collisage?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    quantite_a_demander?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category?: CategoryUpdateOneRequiredWithoutArticlesNestedInput
    bon_de_commande_categories?: BonDeCommandeCategoryUpdateManyWithoutArticleNestedInput
  }

  export type ArticleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category_id?: StringFieldUpdateOperationsInput | string
    collisage?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    quantite_a_demander?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bon_de_commande_categories?: BonDeCommandeCategoryUncheckedUpdateManyWithoutArticleNestedInput
  }

  export type ArticleCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    category_id: string
    collisage: string
    type?: string
    numero?: number | null
    quantite_a_demander?: Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: Decimal | DecimalJsLike | number | string | null
  }

  export type ArticleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    collisage?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    quantite_a_demander?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ArticleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category_id?: StringFieldUpdateOperationsInput | string
    collisage?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    quantite_a_demander?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    description?: string | null
    articles?: ArticleCreateNestedManyWithoutCategoryInput
    commandes?: BonDeCommandeCategoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    articles?: ArticleUncheckedCreateNestedManyWithoutCategoryInput
    commandes?: BonDeCommandeCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    articles?: ArticleUpdateManyWithoutCategoryNestedInput
    commandes?: BonDeCommandeCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    articles?: ArticleUncheckedUpdateManyWithoutCategoryNestedInput
    commandes?: BonDeCommandeCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    description?: string | null
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BonDeCommandeCategoryCreateInput = {
    id?: string
    quantite_a_demander?: Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: Decimal | DecimalJsLike | number | string | null
    article?: ArticleCreateNestedOneWithoutBon_de_commande_categoriesInput
    bon_de_commande: BonDeCommandeCreateNestedOneWithoutCategoriesInput
    category: CategoryCreateNestedOneWithoutCommandesInput
  }

  export type BonDeCommandeCategoryUncheckedCreateInput = {
    id?: string
    category_id: string
    bon_de_commande_id: string
    article_id?: string | null
    quantite_a_demander?: Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: Decimal | DecimalJsLike | number | string | null
  }

  export type BonDeCommandeCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantite_a_demander?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    article?: ArticleUpdateOneWithoutBon_de_commande_categoriesNestedInput
    bon_de_commande?: BonDeCommandeUpdateOneRequiredWithoutCategoriesNestedInput
    category?: CategoryUpdateOneRequiredWithoutCommandesNestedInput
  }

  export type BonDeCommandeCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    bon_de_commande_id?: StringFieldUpdateOperationsInput | string
    article_id?: NullableStringFieldUpdateOperationsInput | string | null
    quantite_a_demander?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type BonDeCommandeCategoryCreateManyInput = {
    id?: string
    category_id: string
    bon_de_commande_id: string
    article_id?: string | null
    quantite_a_demander?: Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: Decimal | DecimalJsLike | number | string | null
  }

  export type BonDeCommandeCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantite_a_demander?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type BonDeCommandeCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    bon_de_commande_id?: StringFieldUpdateOperationsInput | string
    article_id?: NullableStringFieldUpdateOperationsInput | string | null
    quantite_a_demander?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type BonDeCommandeCreateInput = {
    id?: string
    created_at?: Date | string
    description: string
    status: string
    code: string
    target_date?: Date | string
    employee: EmployeeCreateNestedOneWithoutBons_de_commandeInput
    categories?: BonDeCommandeCategoryCreateNestedManyWithoutBon_de_commandeInput
  }

  export type BonDeCommandeUncheckedCreateInput = {
    id?: string
    created_at?: Date | string
    description: string
    status: string
    employee_id: string
    code: string
    target_date?: Date | string
    categories?: BonDeCommandeCategoryUncheckedCreateNestedManyWithoutBon_de_commandeInput
  }

  export type BonDeCommandeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    target_date?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutBons_de_commandeNestedInput
    categories?: BonDeCommandeCategoryUpdateManyWithoutBon_de_commandeNestedInput
  }

  export type BonDeCommandeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    target_date?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: BonDeCommandeCategoryUncheckedUpdateManyWithoutBon_de_commandeNestedInput
  }

  export type BonDeCommandeCreateManyInput = {
    id?: string
    created_at?: Date | string
    description: string
    status: string
    employee_id: string
    code: string
    target_date?: Date | string
  }

  export type BonDeCommandeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    target_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BonDeCommandeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    target_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeCreateInput = {
    id?: string
    bons_de_commande?: BonDeCommandeCreateNestedManyWithoutEmployeeInput
    user: UserCreateNestedOneWithoutEmployeeInput
    gerant_assignments?: GerantEmployeeAssignmentCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateInput = {
    id?: string
    user_id: string
    bons_de_commande?: BonDeCommandeUncheckedCreateNestedManyWithoutEmployeeInput
    gerant_assignments?: GerantEmployeeAssignmentUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bons_de_commande?: BonDeCommandeUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    gerant_assignments?: GerantEmployeeAssignmentUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    bons_de_commande?: BonDeCommandeUncheckedUpdateManyWithoutEmployeeNestedInput
    gerant_assignments?: GerantEmployeeAssignmentUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateManyInput = {
    id?: string
    user_id: string
  }

  export type EmployeeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    id?: string
    username: string
    email: string
    password: string
    refreshToken?: string | null
    admin?: AdminCreateNestedOneWithoutUserInput
    employee?: EmployeeCreateNestedOneWithoutUserInput
    gerant_assignments?: GerantEmployeeAssignmentCreateNestedManyWithoutGerantInput
    role: RoleCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    email: string
    password: string
    role_id: string
    refreshToken?: string | null
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    gerant_assignments?: GerantEmployeeAssignmentUncheckedCreateNestedManyWithoutGerantInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: AdminUpdateOneWithoutUserNestedInput
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    gerant_assignments?: GerantEmployeeAssignmentUpdateManyWithoutGerantNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role_id?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    gerant_assignments?: GerantEmployeeAssignmentUncheckedUpdateManyWithoutGerantNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    email: string
    password: string
    role_id: string
    refreshToken?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role_id?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoleCreateInput = {
    id?: string
    name: string
    users?: UserCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: string
    name: string
    users?: UserUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: string
    name: string
  }

  export type RoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AdminCreateInput = {
    id?: string
    user: UserCreateNestedOneWithoutAdminInput
  }

  export type AdminUncheckedCreateInput = {
    id?: string
    user_id: string
  }

  export type AdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type AdminCreateManyInput = {
    id?: string
    user_id: string
  }

  export type AdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type GerantEmployeeAssignmentCreateInput = {
    id?: string
    created_at?: Date | string
    employee: EmployeeCreateNestedOneWithoutGerant_assignmentsInput
    gerant: UserCreateNestedOneWithoutGerant_assignmentsInput
  }

  export type GerantEmployeeAssignmentUncheckedCreateInput = {
    id?: string
    gerant_id: string
    employee_id: string
    created_at?: Date | string
  }

  export type GerantEmployeeAssignmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutGerant_assignmentsNestedInput
    gerant?: UserUpdateOneRequiredWithoutGerant_assignmentsNestedInput
  }

  export type GerantEmployeeAssignmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    gerant_id?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GerantEmployeeAssignmentCreateManyInput = {
    id?: string
    gerant_id: string
    employee_id: string
    created_at?: Date | string
  }

  export type GerantEmployeeAssignmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GerantEmployeeAssignmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    gerant_id?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CategoryScalarRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type BonDeCommandeCategoryListRelationFilter = {
    every?: BonDeCommandeCategoryWhereInput
    some?: BonDeCommandeCategoryWhereInput
    none?: BonDeCommandeCategoryWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BonDeCommandeCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArticleOrderByRelevanceInput = {
    fields: ArticleOrderByRelevanceFieldEnum | ArticleOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ArticleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    category_id?: SortOrder
    collisage?: SortOrder
    type?: SortOrder
    numero?: SortOrder
    quantite_a_demander?: SortOrder
    quantite_a_stocker?: SortOrder
  }

  export type ArticleAvgOrderByAggregateInput = {
    price?: SortOrder
    numero?: SortOrder
    quantite_a_demander?: SortOrder
    quantite_a_stocker?: SortOrder
  }

  export type ArticleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    category_id?: SortOrder
    collisage?: SortOrder
    type?: SortOrder
    numero?: SortOrder
    quantite_a_demander?: SortOrder
    quantite_a_stocker?: SortOrder
  }

  export type ArticleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    category_id?: SortOrder
    collisage?: SortOrder
    type?: SortOrder
    numero?: SortOrder
    quantite_a_demander?: SortOrder
    quantite_a_stocker?: SortOrder
  }

  export type ArticleSumOrderByAggregateInput = {
    price?: SortOrder
    numero?: SortOrder
    quantite_a_demander?: SortOrder
    quantite_a_stocker?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ArticleListRelationFilter = {
    every?: ArticleWhereInput
    some?: ArticleWhereInput
    none?: ArticleWhereInput
  }

  export type ArticleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryOrderByRelevanceInput = {
    fields: CategoryOrderByRelevanceFieldEnum | CategoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type ArticleNullableScalarRelationFilter = {
    is?: ArticleWhereInput | null
    isNot?: ArticleWhereInput | null
  }

  export type BonDeCommandeScalarRelationFilter = {
    is?: BonDeCommandeWhereInput
    isNot?: BonDeCommandeWhereInput
  }

  export type BonDeCommandeCategoryOrderByRelevanceInput = {
    fields: BonDeCommandeCategoryOrderByRelevanceFieldEnum | BonDeCommandeCategoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BonDeCommandeCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
    bon_de_commande_id?: SortOrder
    article_id?: SortOrder
    quantite_a_demander?: SortOrder
    quantite_a_stocker?: SortOrder
  }

  export type BonDeCommandeCategoryAvgOrderByAggregateInput = {
    quantite_a_demander?: SortOrder
    quantite_a_stocker?: SortOrder
  }

  export type BonDeCommandeCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
    bon_de_commande_id?: SortOrder
    article_id?: SortOrder
    quantite_a_demander?: SortOrder
    quantite_a_stocker?: SortOrder
  }

  export type BonDeCommandeCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
    bon_de_commande_id?: SortOrder
    article_id?: SortOrder
    quantite_a_demander?: SortOrder
    quantite_a_stocker?: SortOrder
  }

  export type BonDeCommandeCategorySumOrderByAggregateInput = {
    quantite_a_demander?: SortOrder
    quantite_a_stocker?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EmployeeScalarRelationFilter = {
    is?: EmployeeWhereInput
    isNot?: EmployeeWhereInput
  }

  export type BonDeCommandeOrderByRelevanceInput = {
    fields: BonDeCommandeOrderByRelevanceFieldEnum | BonDeCommandeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BonDeCommandeCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    description?: SortOrder
    status?: SortOrder
    employee_id?: SortOrder
    code?: SortOrder
    target_date?: SortOrder
  }

  export type BonDeCommandeMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    description?: SortOrder
    status?: SortOrder
    employee_id?: SortOrder
    code?: SortOrder
    target_date?: SortOrder
  }

  export type BonDeCommandeMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    description?: SortOrder
    status?: SortOrder
    employee_id?: SortOrder
    code?: SortOrder
    target_date?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BonDeCommandeListRelationFilter = {
    every?: BonDeCommandeWhereInput
    some?: BonDeCommandeWhereInput
    none?: BonDeCommandeWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type GerantEmployeeAssignmentListRelationFilter = {
    every?: GerantEmployeeAssignmentWhereInput
    some?: GerantEmployeeAssignmentWhereInput
    none?: GerantEmployeeAssignmentWhereInput
  }

  export type BonDeCommandeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GerantEmployeeAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeOrderByRelevanceInput = {
    fields: EmployeeOrderByRelevanceFieldEnum | EmployeeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type EmployeeCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type EmployeeMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type EmployeeMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type AdminNullableScalarRelationFilter = {
    is?: AdminWhereInput | null
    isNot?: AdminWhereInput | null
  }

  export type EmployeeNullableScalarRelationFilter = {
    is?: EmployeeWhereInput | null
    isNot?: EmployeeWhereInput | null
  }

  export type RoleScalarRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
    refreshToken?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
    refreshToken?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
    refreshToken?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleOrderByRelevanceInput = {
    fields: RoleOrderByRelevanceFieldEnum | RoleOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type AdminOrderByRelevanceInput = {
    fields: AdminOrderByRelevanceFieldEnum | AdminOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type GerantEmployeeAssignmentOrderByRelevanceInput = {
    fields: GerantEmployeeAssignmentOrderByRelevanceFieldEnum | GerantEmployeeAssignmentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type GerantEmployeeAssignmentGerant_idEmployee_idCompoundUniqueInput = {
    gerant_id: string
    employee_id: string
  }

  export type GerantEmployeeAssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    gerant_id?: SortOrder
    employee_id?: SortOrder
    created_at?: SortOrder
  }

  export type GerantEmployeeAssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    gerant_id?: SortOrder
    employee_id?: SortOrder
    created_at?: SortOrder
  }

  export type GerantEmployeeAssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    gerant_id?: SortOrder
    employee_id?: SortOrder
    created_at?: SortOrder
  }

  export type CategoryCreateNestedOneWithoutArticlesInput = {
    create?: XOR<CategoryCreateWithoutArticlesInput, CategoryUncheckedCreateWithoutArticlesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutArticlesInput
    connect?: CategoryWhereUniqueInput
  }

  export type BonDeCommandeCategoryCreateNestedManyWithoutArticleInput = {
    create?: XOR<BonDeCommandeCategoryCreateWithoutArticleInput, BonDeCommandeCategoryUncheckedCreateWithoutArticleInput> | BonDeCommandeCategoryCreateWithoutArticleInput[] | BonDeCommandeCategoryUncheckedCreateWithoutArticleInput[]
    connectOrCreate?: BonDeCommandeCategoryCreateOrConnectWithoutArticleInput | BonDeCommandeCategoryCreateOrConnectWithoutArticleInput[]
    createMany?: BonDeCommandeCategoryCreateManyArticleInputEnvelope
    connect?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
  }

  export type BonDeCommandeCategoryUncheckedCreateNestedManyWithoutArticleInput = {
    create?: XOR<BonDeCommandeCategoryCreateWithoutArticleInput, BonDeCommandeCategoryUncheckedCreateWithoutArticleInput> | BonDeCommandeCategoryCreateWithoutArticleInput[] | BonDeCommandeCategoryUncheckedCreateWithoutArticleInput[]
    connectOrCreate?: BonDeCommandeCategoryCreateOrConnectWithoutArticleInput | BonDeCommandeCategoryCreateOrConnectWithoutArticleInput[]
    createMany?: BonDeCommandeCategoryCreateManyArticleInputEnvelope
    connect?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CategoryUpdateOneRequiredWithoutArticlesNestedInput = {
    create?: XOR<CategoryCreateWithoutArticlesInput, CategoryUncheckedCreateWithoutArticlesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutArticlesInput
    upsert?: CategoryUpsertWithoutArticlesInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutArticlesInput, CategoryUpdateWithoutArticlesInput>, CategoryUncheckedUpdateWithoutArticlesInput>
  }

  export type BonDeCommandeCategoryUpdateManyWithoutArticleNestedInput = {
    create?: XOR<BonDeCommandeCategoryCreateWithoutArticleInput, BonDeCommandeCategoryUncheckedCreateWithoutArticleInput> | BonDeCommandeCategoryCreateWithoutArticleInput[] | BonDeCommandeCategoryUncheckedCreateWithoutArticleInput[]
    connectOrCreate?: BonDeCommandeCategoryCreateOrConnectWithoutArticleInput | BonDeCommandeCategoryCreateOrConnectWithoutArticleInput[]
    upsert?: BonDeCommandeCategoryUpsertWithWhereUniqueWithoutArticleInput | BonDeCommandeCategoryUpsertWithWhereUniqueWithoutArticleInput[]
    createMany?: BonDeCommandeCategoryCreateManyArticleInputEnvelope
    set?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    disconnect?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    delete?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    connect?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    update?: BonDeCommandeCategoryUpdateWithWhereUniqueWithoutArticleInput | BonDeCommandeCategoryUpdateWithWhereUniqueWithoutArticleInput[]
    updateMany?: BonDeCommandeCategoryUpdateManyWithWhereWithoutArticleInput | BonDeCommandeCategoryUpdateManyWithWhereWithoutArticleInput[]
    deleteMany?: BonDeCommandeCategoryScalarWhereInput | BonDeCommandeCategoryScalarWhereInput[]
  }

  export type BonDeCommandeCategoryUncheckedUpdateManyWithoutArticleNestedInput = {
    create?: XOR<BonDeCommandeCategoryCreateWithoutArticleInput, BonDeCommandeCategoryUncheckedCreateWithoutArticleInput> | BonDeCommandeCategoryCreateWithoutArticleInput[] | BonDeCommandeCategoryUncheckedCreateWithoutArticleInput[]
    connectOrCreate?: BonDeCommandeCategoryCreateOrConnectWithoutArticleInput | BonDeCommandeCategoryCreateOrConnectWithoutArticleInput[]
    upsert?: BonDeCommandeCategoryUpsertWithWhereUniqueWithoutArticleInput | BonDeCommandeCategoryUpsertWithWhereUniqueWithoutArticleInput[]
    createMany?: BonDeCommandeCategoryCreateManyArticleInputEnvelope
    set?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    disconnect?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    delete?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    connect?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    update?: BonDeCommandeCategoryUpdateWithWhereUniqueWithoutArticleInput | BonDeCommandeCategoryUpdateWithWhereUniqueWithoutArticleInput[]
    updateMany?: BonDeCommandeCategoryUpdateManyWithWhereWithoutArticleInput | BonDeCommandeCategoryUpdateManyWithWhereWithoutArticleInput[]
    deleteMany?: BonDeCommandeCategoryScalarWhereInput | BonDeCommandeCategoryScalarWhereInput[]
  }

  export type ArticleCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ArticleCreateWithoutCategoryInput, ArticleUncheckedCreateWithoutCategoryInput> | ArticleCreateWithoutCategoryInput[] | ArticleUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ArticleCreateOrConnectWithoutCategoryInput | ArticleCreateOrConnectWithoutCategoryInput[]
    createMany?: ArticleCreateManyCategoryInputEnvelope
    connect?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
  }

  export type BonDeCommandeCategoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<BonDeCommandeCategoryCreateWithoutCategoryInput, BonDeCommandeCategoryUncheckedCreateWithoutCategoryInput> | BonDeCommandeCategoryCreateWithoutCategoryInput[] | BonDeCommandeCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: BonDeCommandeCategoryCreateOrConnectWithoutCategoryInput | BonDeCommandeCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: BonDeCommandeCategoryCreateManyCategoryInputEnvelope
    connect?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
  }

  export type ArticleUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ArticleCreateWithoutCategoryInput, ArticleUncheckedCreateWithoutCategoryInput> | ArticleCreateWithoutCategoryInput[] | ArticleUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ArticleCreateOrConnectWithoutCategoryInput | ArticleCreateOrConnectWithoutCategoryInput[]
    createMany?: ArticleCreateManyCategoryInputEnvelope
    connect?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
  }

  export type BonDeCommandeCategoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<BonDeCommandeCategoryCreateWithoutCategoryInput, BonDeCommandeCategoryUncheckedCreateWithoutCategoryInput> | BonDeCommandeCategoryCreateWithoutCategoryInput[] | BonDeCommandeCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: BonDeCommandeCategoryCreateOrConnectWithoutCategoryInput | BonDeCommandeCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: BonDeCommandeCategoryCreateManyCategoryInputEnvelope
    connect?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
  }

  export type ArticleUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ArticleCreateWithoutCategoryInput, ArticleUncheckedCreateWithoutCategoryInput> | ArticleCreateWithoutCategoryInput[] | ArticleUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ArticleCreateOrConnectWithoutCategoryInput | ArticleCreateOrConnectWithoutCategoryInput[]
    upsert?: ArticleUpsertWithWhereUniqueWithoutCategoryInput | ArticleUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ArticleCreateManyCategoryInputEnvelope
    set?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    disconnect?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    delete?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    connect?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    update?: ArticleUpdateWithWhereUniqueWithoutCategoryInput | ArticleUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ArticleUpdateManyWithWhereWithoutCategoryInput | ArticleUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ArticleScalarWhereInput | ArticleScalarWhereInput[]
  }

  export type BonDeCommandeCategoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<BonDeCommandeCategoryCreateWithoutCategoryInput, BonDeCommandeCategoryUncheckedCreateWithoutCategoryInput> | BonDeCommandeCategoryCreateWithoutCategoryInput[] | BonDeCommandeCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: BonDeCommandeCategoryCreateOrConnectWithoutCategoryInput | BonDeCommandeCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: BonDeCommandeCategoryUpsertWithWhereUniqueWithoutCategoryInput | BonDeCommandeCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: BonDeCommandeCategoryCreateManyCategoryInputEnvelope
    set?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    disconnect?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    delete?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    connect?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    update?: BonDeCommandeCategoryUpdateWithWhereUniqueWithoutCategoryInput | BonDeCommandeCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: BonDeCommandeCategoryUpdateManyWithWhereWithoutCategoryInput | BonDeCommandeCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: BonDeCommandeCategoryScalarWhereInput | BonDeCommandeCategoryScalarWhereInput[]
  }

  export type ArticleUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ArticleCreateWithoutCategoryInput, ArticleUncheckedCreateWithoutCategoryInput> | ArticleCreateWithoutCategoryInput[] | ArticleUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ArticleCreateOrConnectWithoutCategoryInput | ArticleCreateOrConnectWithoutCategoryInput[]
    upsert?: ArticleUpsertWithWhereUniqueWithoutCategoryInput | ArticleUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ArticleCreateManyCategoryInputEnvelope
    set?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    disconnect?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    delete?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    connect?: ArticleWhereUniqueInput | ArticleWhereUniqueInput[]
    update?: ArticleUpdateWithWhereUniqueWithoutCategoryInput | ArticleUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ArticleUpdateManyWithWhereWithoutCategoryInput | ArticleUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ArticleScalarWhereInput | ArticleScalarWhereInput[]
  }

  export type BonDeCommandeCategoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<BonDeCommandeCategoryCreateWithoutCategoryInput, BonDeCommandeCategoryUncheckedCreateWithoutCategoryInput> | BonDeCommandeCategoryCreateWithoutCategoryInput[] | BonDeCommandeCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: BonDeCommandeCategoryCreateOrConnectWithoutCategoryInput | BonDeCommandeCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: BonDeCommandeCategoryUpsertWithWhereUniqueWithoutCategoryInput | BonDeCommandeCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: BonDeCommandeCategoryCreateManyCategoryInputEnvelope
    set?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    disconnect?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    delete?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    connect?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    update?: BonDeCommandeCategoryUpdateWithWhereUniqueWithoutCategoryInput | BonDeCommandeCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: BonDeCommandeCategoryUpdateManyWithWhereWithoutCategoryInput | BonDeCommandeCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: BonDeCommandeCategoryScalarWhereInput | BonDeCommandeCategoryScalarWhereInput[]
  }

  export type ArticleCreateNestedOneWithoutBon_de_commande_categoriesInput = {
    create?: XOR<ArticleCreateWithoutBon_de_commande_categoriesInput, ArticleUncheckedCreateWithoutBon_de_commande_categoriesInput>
    connectOrCreate?: ArticleCreateOrConnectWithoutBon_de_commande_categoriesInput
    connect?: ArticleWhereUniqueInput
  }

  export type BonDeCommandeCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<BonDeCommandeCreateWithoutCategoriesInput, BonDeCommandeUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: BonDeCommandeCreateOrConnectWithoutCategoriesInput
    connect?: BonDeCommandeWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutCommandesInput = {
    create?: XOR<CategoryCreateWithoutCommandesInput, CategoryUncheckedCreateWithoutCommandesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutCommandesInput
    connect?: CategoryWhereUniqueInput
  }

  export type ArticleUpdateOneWithoutBon_de_commande_categoriesNestedInput = {
    create?: XOR<ArticleCreateWithoutBon_de_commande_categoriesInput, ArticleUncheckedCreateWithoutBon_de_commande_categoriesInput>
    connectOrCreate?: ArticleCreateOrConnectWithoutBon_de_commande_categoriesInput
    upsert?: ArticleUpsertWithoutBon_de_commande_categoriesInput
    disconnect?: ArticleWhereInput | boolean
    delete?: ArticleWhereInput | boolean
    connect?: ArticleWhereUniqueInput
    update?: XOR<XOR<ArticleUpdateToOneWithWhereWithoutBon_de_commande_categoriesInput, ArticleUpdateWithoutBon_de_commande_categoriesInput>, ArticleUncheckedUpdateWithoutBon_de_commande_categoriesInput>
  }

  export type BonDeCommandeUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<BonDeCommandeCreateWithoutCategoriesInput, BonDeCommandeUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: BonDeCommandeCreateOrConnectWithoutCategoriesInput
    upsert?: BonDeCommandeUpsertWithoutCategoriesInput
    connect?: BonDeCommandeWhereUniqueInput
    update?: XOR<XOR<BonDeCommandeUpdateToOneWithWhereWithoutCategoriesInput, BonDeCommandeUpdateWithoutCategoriesInput>, BonDeCommandeUncheckedUpdateWithoutCategoriesInput>
  }

  export type CategoryUpdateOneRequiredWithoutCommandesNestedInput = {
    create?: XOR<CategoryCreateWithoutCommandesInput, CategoryUncheckedCreateWithoutCommandesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutCommandesInput
    upsert?: CategoryUpsertWithoutCommandesInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutCommandesInput, CategoryUpdateWithoutCommandesInput>, CategoryUncheckedUpdateWithoutCommandesInput>
  }

  export type EmployeeCreateNestedOneWithoutBons_de_commandeInput = {
    create?: XOR<EmployeeCreateWithoutBons_de_commandeInput, EmployeeUncheckedCreateWithoutBons_de_commandeInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutBons_de_commandeInput
    connect?: EmployeeWhereUniqueInput
  }

  export type BonDeCommandeCategoryCreateNestedManyWithoutBon_de_commandeInput = {
    create?: XOR<BonDeCommandeCategoryCreateWithoutBon_de_commandeInput, BonDeCommandeCategoryUncheckedCreateWithoutBon_de_commandeInput> | BonDeCommandeCategoryCreateWithoutBon_de_commandeInput[] | BonDeCommandeCategoryUncheckedCreateWithoutBon_de_commandeInput[]
    connectOrCreate?: BonDeCommandeCategoryCreateOrConnectWithoutBon_de_commandeInput | BonDeCommandeCategoryCreateOrConnectWithoutBon_de_commandeInput[]
    createMany?: BonDeCommandeCategoryCreateManyBon_de_commandeInputEnvelope
    connect?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
  }

  export type BonDeCommandeCategoryUncheckedCreateNestedManyWithoutBon_de_commandeInput = {
    create?: XOR<BonDeCommandeCategoryCreateWithoutBon_de_commandeInput, BonDeCommandeCategoryUncheckedCreateWithoutBon_de_commandeInput> | BonDeCommandeCategoryCreateWithoutBon_de_commandeInput[] | BonDeCommandeCategoryUncheckedCreateWithoutBon_de_commandeInput[]
    connectOrCreate?: BonDeCommandeCategoryCreateOrConnectWithoutBon_de_commandeInput | BonDeCommandeCategoryCreateOrConnectWithoutBon_de_commandeInput[]
    createMany?: BonDeCommandeCategoryCreateManyBon_de_commandeInputEnvelope
    connect?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EmployeeUpdateOneRequiredWithoutBons_de_commandeNestedInput = {
    create?: XOR<EmployeeCreateWithoutBons_de_commandeInput, EmployeeUncheckedCreateWithoutBons_de_commandeInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutBons_de_commandeInput
    upsert?: EmployeeUpsertWithoutBons_de_commandeInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutBons_de_commandeInput, EmployeeUpdateWithoutBons_de_commandeInput>, EmployeeUncheckedUpdateWithoutBons_de_commandeInput>
  }

  export type BonDeCommandeCategoryUpdateManyWithoutBon_de_commandeNestedInput = {
    create?: XOR<BonDeCommandeCategoryCreateWithoutBon_de_commandeInput, BonDeCommandeCategoryUncheckedCreateWithoutBon_de_commandeInput> | BonDeCommandeCategoryCreateWithoutBon_de_commandeInput[] | BonDeCommandeCategoryUncheckedCreateWithoutBon_de_commandeInput[]
    connectOrCreate?: BonDeCommandeCategoryCreateOrConnectWithoutBon_de_commandeInput | BonDeCommandeCategoryCreateOrConnectWithoutBon_de_commandeInput[]
    upsert?: BonDeCommandeCategoryUpsertWithWhereUniqueWithoutBon_de_commandeInput | BonDeCommandeCategoryUpsertWithWhereUniqueWithoutBon_de_commandeInput[]
    createMany?: BonDeCommandeCategoryCreateManyBon_de_commandeInputEnvelope
    set?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    disconnect?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    delete?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    connect?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    update?: BonDeCommandeCategoryUpdateWithWhereUniqueWithoutBon_de_commandeInput | BonDeCommandeCategoryUpdateWithWhereUniqueWithoutBon_de_commandeInput[]
    updateMany?: BonDeCommandeCategoryUpdateManyWithWhereWithoutBon_de_commandeInput | BonDeCommandeCategoryUpdateManyWithWhereWithoutBon_de_commandeInput[]
    deleteMany?: BonDeCommandeCategoryScalarWhereInput | BonDeCommandeCategoryScalarWhereInput[]
  }

  export type BonDeCommandeCategoryUncheckedUpdateManyWithoutBon_de_commandeNestedInput = {
    create?: XOR<BonDeCommandeCategoryCreateWithoutBon_de_commandeInput, BonDeCommandeCategoryUncheckedCreateWithoutBon_de_commandeInput> | BonDeCommandeCategoryCreateWithoutBon_de_commandeInput[] | BonDeCommandeCategoryUncheckedCreateWithoutBon_de_commandeInput[]
    connectOrCreate?: BonDeCommandeCategoryCreateOrConnectWithoutBon_de_commandeInput | BonDeCommandeCategoryCreateOrConnectWithoutBon_de_commandeInput[]
    upsert?: BonDeCommandeCategoryUpsertWithWhereUniqueWithoutBon_de_commandeInput | BonDeCommandeCategoryUpsertWithWhereUniqueWithoutBon_de_commandeInput[]
    createMany?: BonDeCommandeCategoryCreateManyBon_de_commandeInputEnvelope
    set?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    disconnect?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    delete?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    connect?: BonDeCommandeCategoryWhereUniqueInput | BonDeCommandeCategoryWhereUniqueInput[]
    update?: BonDeCommandeCategoryUpdateWithWhereUniqueWithoutBon_de_commandeInput | BonDeCommandeCategoryUpdateWithWhereUniqueWithoutBon_de_commandeInput[]
    updateMany?: BonDeCommandeCategoryUpdateManyWithWhereWithoutBon_de_commandeInput | BonDeCommandeCategoryUpdateManyWithWhereWithoutBon_de_commandeInput[]
    deleteMany?: BonDeCommandeCategoryScalarWhereInput | BonDeCommandeCategoryScalarWhereInput[]
  }

  export type BonDeCommandeCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<BonDeCommandeCreateWithoutEmployeeInput, BonDeCommandeUncheckedCreateWithoutEmployeeInput> | BonDeCommandeCreateWithoutEmployeeInput[] | BonDeCommandeUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: BonDeCommandeCreateOrConnectWithoutEmployeeInput | BonDeCommandeCreateOrConnectWithoutEmployeeInput[]
    createMany?: BonDeCommandeCreateManyEmployeeInputEnvelope
    connect?: BonDeCommandeWhereUniqueInput | BonDeCommandeWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployeeInput
    connect?: UserWhereUniqueInput
  }

  export type GerantEmployeeAssignmentCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<GerantEmployeeAssignmentCreateWithoutEmployeeInput, GerantEmployeeAssignmentUncheckedCreateWithoutEmployeeInput> | GerantEmployeeAssignmentCreateWithoutEmployeeInput[] | GerantEmployeeAssignmentUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: GerantEmployeeAssignmentCreateOrConnectWithoutEmployeeInput | GerantEmployeeAssignmentCreateOrConnectWithoutEmployeeInput[]
    createMany?: GerantEmployeeAssignmentCreateManyEmployeeInputEnvelope
    connect?: GerantEmployeeAssignmentWhereUniqueInput | GerantEmployeeAssignmentWhereUniqueInput[]
  }

  export type BonDeCommandeUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<BonDeCommandeCreateWithoutEmployeeInput, BonDeCommandeUncheckedCreateWithoutEmployeeInput> | BonDeCommandeCreateWithoutEmployeeInput[] | BonDeCommandeUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: BonDeCommandeCreateOrConnectWithoutEmployeeInput | BonDeCommandeCreateOrConnectWithoutEmployeeInput[]
    createMany?: BonDeCommandeCreateManyEmployeeInputEnvelope
    connect?: BonDeCommandeWhereUniqueInput | BonDeCommandeWhereUniqueInput[]
  }

  export type GerantEmployeeAssignmentUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<GerantEmployeeAssignmentCreateWithoutEmployeeInput, GerantEmployeeAssignmentUncheckedCreateWithoutEmployeeInput> | GerantEmployeeAssignmentCreateWithoutEmployeeInput[] | GerantEmployeeAssignmentUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: GerantEmployeeAssignmentCreateOrConnectWithoutEmployeeInput | GerantEmployeeAssignmentCreateOrConnectWithoutEmployeeInput[]
    createMany?: GerantEmployeeAssignmentCreateManyEmployeeInputEnvelope
    connect?: GerantEmployeeAssignmentWhereUniqueInput | GerantEmployeeAssignmentWhereUniqueInput[]
  }

  export type BonDeCommandeUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<BonDeCommandeCreateWithoutEmployeeInput, BonDeCommandeUncheckedCreateWithoutEmployeeInput> | BonDeCommandeCreateWithoutEmployeeInput[] | BonDeCommandeUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: BonDeCommandeCreateOrConnectWithoutEmployeeInput | BonDeCommandeCreateOrConnectWithoutEmployeeInput[]
    upsert?: BonDeCommandeUpsertWithWhereUniqueWithoutEmployeeInput | BonDeCommandeUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: BonDeCommandeCreateManyEmployeeInputEnvelope
    set?: BonDeCommandeWhereUniqueInput | BonDeCommandeWhereUniqueInput[]
    disconnect?: BonDeCommandeWhereUniqueInput | BonDeCommandeWhereUniqueInput[]
    delete?: BonDeCommandeWhereUniqueInput | BonDeCommandeWhereUniqueInput[]
    connect?: BonDeCommandeWhereUniqueInput | BonDeCommandeWhereUniqueInput[]
    update?: BonDeCommandeUpdateWithWhereUniqueWithoutEmployeeInput | BonDeCommandeUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: BonDeCommandeUpdateManyWithWhereWithoutEmployeeInput | BonDeCommandeUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: BonDeCommandeScalarWhereInput | BonDeCommandeScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutEmployeeNestedInput = {
    create?: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployeeInput
    upsert?: UserUpsertWithoutEmployeeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmployeeInput, UserUpdateWithoutEmployeeInput>, UserUncheckedUpdateWithoutEmployeeInput>
  }

  export type GerantEmployeeAssignmentUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<GerantEmployeeAssignmentCreateWithoutEmployeeInput, GerantEmployeeAssignmentUncheckedCreateWithoutEmployeeInput> | GerantEmployeeAssignmentCreateWithoutEmployeeInput[] | GerantEmployeeAssignmentUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: GerantEmployeeAssignmentCreateOrConnectWithoutEmployeeInput | GerantEmployeeAssignmentCreateOrConnectWithoutEmployeeInput[]
    upsert?: GerantEmployeeAssignmentUpsertWithWhereUniqueWithoutEmployeeInput | GerantEmployeeAssignmentUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: GerantEmployeeAssignmentCreateManyEmployeeInputEnvelope
    set?: GerantEmployeeAssignmentWhereUniqueInput | GerantEmployeeAssignmentWhereUniqueInput[]
    disconnect?: GerantEmployeeAssignmentWhereUniqueInput | GerantEmployeeAssignmentWhereUniqueInput[]
    delete?: GerantEmployeeAssignmentWhereUniqueInput | GerantEmployeeAssignmentWhereUniqueInput[]
    connect?: GerantEmployeeAssignmentWhereUniqueInput | GerantEmployeeAssignmentWhereUniqueInput[]
    update?: GerantEmployeeAssignmentUpdateWithWhereUniqueWithoutEmployeeInput | GerantEmployeeAssignmentUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: GerantEmployeeAssignmentUpdateManyWithWhereWithoutEmployeeInput | GerantEmployeeAssignmentUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: GerantEmployeeAssignmentScalarWhereInput | GerantEmployeeAssignmentScalarWhereInput[]
  }

  export type BonDeCommandeUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<BonDeCommandeCreateWithoutEmployeeInput, BonDeCommandeUncheckedCreateWithoutEmployeeInput> | BonDeCommandeCreateWithoutEmployeeInput[] | BonDeCommandeUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: BonDeCommandeCreateOrConnectWithoutEmployeeInput | BonDeCommandeCreateOrConnectWithoutEmployeeInput[]
    upsert?: BonDeCommandeUpsertWithWhereUniqueWithoutEmployeeInput | BonDeCommandeUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: BonDeCommandeCreateManyEmployeeInputEnvelope
    set?: BonDeCommandeWhereUniqueInput | BonDeCommandeWhereUniqueInput[]
    disconnect?: BonDeCommandeWhereUniqueInput | BonDeCommandeWhereUniqueInput[]
    delete?: BonDeCommandeWhereUniqueInput | BonDeCommandeWhereUniqueInput[]
    connect?: BonDeCommandeWhereUniqueInput | BonDeCommandeWhereUniqueInput[]
    update?: BonDeCommandeUpdateWithWhereUniqueWithoutEmployeeInput | BonDeCommandeUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: BonDeCommandeUpdateManyWithWhereWithoutEmployeeInput | BonDeCommandeUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: BonDeCommandeScalarWhereInput | BonDeCommandeScalarWhereInput[]
  }

  export type GerantEmployeeAssignmentUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<GerantEmployeeAssignmentCreateWithoutEmployeeInput, GerantEmployeeAssignmentUncheckedCreateWithoutEmployeeInput> | GerantEmployeeAssignmentCreateWithoutEmployeeInput[] | GerantEmployeeAssignmentUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: GerantEmployeeAssignmentCreateOrConnectWithoutEmployeeInput | GerantEmployeeAssignmentCreateOrConnectWithoutEmployeeInput[]
    upsert?: GerantEmployeeAssignmentUpsertWithWhereUniqueWithoutEmployeeInput | GerantEmployeeAssignmentUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: GerantEmployeeAssignmentCreateManyEmployeeInputEnvelope
    set?: GerantEmployeeAssignmentWhereUniqueInput | GerantEmployeeAssignmentWhereUniqueInput[]
    disconnect?: GerantEmployeeAssignmentWhereUniqueInput | GerantEmployeeAssignmentWhereUniqueInput[]
    delete?: GerantEmployeeAssignmentWhereUniqueInput | GerantEmployeeAssignmentWhereUniqueInput[]
    connect?: GerantEmployeeAssignmentWhereUniqueInput | GerantEmployeeAssignmentWhereUniqueInput[]
    update?: GerantEmployeeAssignmentUpdateWithWhereUniqueWithoutEmployeeInput | GerantEmployeeAssignmentUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: GerantEmployeeAssignmentUpdateManyWithWhereWithoutEmployeeInput | GerantEmployeeAssignmentUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: GerantEmployeeAssignmentScalarWhereInput | GerantEmployeeAssignmentScalarWhereInput[]
  }

  export type AdminCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    connect?: AdminWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUserInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    connect?: EmployeeWhereUniqueInput
  }

  export type GerantEmployeeAssignmentCreateNestedManyWithoutGerantInput = {
    create?: XOR<GerantEmployeeAssignmentCreateWithoutGerantInput, GerantEmployeeAssignmentUncheckedCreateWithoutGerantInput> | GerantEmployeeAssignmentCreateWithoutGerantInput[] | GerantEmployeeAssignmentUncheckedCreateWithoutGerantInput[]
    connectOrCreate?: GerantEmployeeAssignmentCreateOrConnectWithoutGerantInput | GerantEmployeeAssignmentCreateOrConnectWithoutGerantInput[]
    createMany?: GerantEmployeeAssignmentCreateManyGerantInputEnvelope
    connect?: GerantEmployeeAssignmentWhereUniqueInput | GerantEmployeeAssignmentWhereUniqueInput[]
  }

  export type RoleCreateNestedOneWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    connect?: RoleWhereUniqueInput
  }

  export type AdminUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    connect?: AdminWhereUniqueInput
  }

  export type EmployeeUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    connect?: EmployeeWhereUniqueInput
  }

  export type GerantEmployeeAssignmentUncheckedCreateNestedManyWithoutGerantInput = {
    create?: XOR<GerantEmployeeAssignmentCreateWithoutGerantInput, GerantEmployeeAssignmentUncheckedCreateWithoutGerantInput> | GerantEmployeeAssignmentCreateWithoutGerantInput[] | GerantEmployeeAssignmentUncheckedCreateWithoutGerantInput[]
    connectOrCreate?: GerantEmployeeAssignmentCreateOrConnectWithoutGerantInput | GerantEmployeeAssignmentCreateOrConnectWithoutGerantInput[]
    createMany?: GerantEmployeeAssignmentCreateManyGerantInputEnvelope
    connect?: GerantEmployeeAssignmentWhereUniqueInput | GerantEmployeeAssignmentWhereUniqueInput[]
  }

  export type AdminUpdateOneWithoutUserNestedInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    upsert?: AdminUpsertWithoutUserInput
    disconnect?: AdminWhereInput | boolean
    delete?: AdminWhereInput | boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutUserInput, AdminUpdateWithoutUserInput>, AdminUncheckedUpdateWithoutUserInput>
  }

  export type EmployeeUpdateOneWithoutUserNestedInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    upsert?: EmployeeUpsertWithoutUserInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUserInput, EmployeeUpdateWithoutUserInput>, EmployeeUncheckedUpdateWithoutUserInput>
  }

  export type GerantEmployeeAssignmentUpdateManyWithoutGerantNestedInput = {
    create?: XOR<GerantEmployeeAssignmentCreateWithoutGerantInput, GerantEmployeeAssignmentUncheckedCreateWithoutGerantInput> | GerantEmployeeAssignmentCreateWithoutGerantInput[] | GerantEmployeeAssignmentUncheckedCreateWithoutGerantInput[]
    connectOrCreate?: GerantEmployeeAssignmentCreateOrConnectWithoutGerantInput | GerantEmployeeAssignmentCreateOrConnectWithoutGerantInput[]
    upsert?: GerantEmployeeAssignmentUpsertWithWhereUniqueWithoutGerantInput | GerantEmployeeAssignmentUpsertWithWhereUniqueWithoutGerantInput[]
    createMany?: GerantEmployeeAssignmentCreateManyGerantInputEnvelope
    set?: GerantEmployeeAssignmentWhereUniqueInput | GerantEmployeeAssignmentWhereUniqueInput[]
    disconnect?: GerantEmployeeAssignmentWhereUniqueInput | GerantEmployeeAssignmentWhereUniqueInput[]
    delete?: GerantEmployeeAssignmentWhereUniqueInput | GerantEmployeeAssignmentWhereUniqueInput[]
    connect?: GerantEmployeeAssignmentWhereUniqueInput | GerantEmployeeAssignmentWhereUniqueInput[]
    update?: GerantEmployeeAssignmentUpdateWithWhereUniqueWithoutGerantInput | GerantEmployeeAssignmentUpdateWithWhereUniqueWithoutGerantInput[]
    updateMany?: GerantEmployeeAssignmentUpdateManyWithWhereWithoutGerantInput | GerantEmployeeAssignmentUpdateManyWithWhereWithoutGerantInput[]
    deleteMany?: GerantEmployeeAssignmentScalarWhereInput | GerantEmployeeAssignmentScalarWhereInput[]
  }

  export type RoleUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    upsert?: RoleUpsertWithoutUsersInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutUsersInput, RoleUpdateWithoutUsersInput>, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type AdminUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    upsert?: AdminUpsertWithoutUserInput
    disconnect?: AdminWhereInput | boolean
    delete?: AdminWhereInput | boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutUserInput, AdminUpdateWithoutUserInput>, AdminUncheckedUpdateWithoutUserInput>
  }

  export type EmployeeUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    upsert?: EmployeeUpsertWithoutUserInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUserInput, EmployeeUpdateWithoutUserInput>, EmployeeUncheckedUpdateWithoutUserInput>
  }

  export type GerantEmployeeAssignmentUncheckedUpdateManyWithoutGerantNestedInput = {
    create?: XOR<GerantEmployeeAssignmentCreateWithoutGerantInput, GerantEmployeeAssignmentUncheckedCreateWithoutGerantInput> | GerantEmployeeAssignmentCreateWithoutGerantInput[] | GerantEmployeeAssignmentUncheckedCreateWithoutGerantInput[]
    connectOrCreate?: GerantEmployeeAssignmentCreateOrConnectWithoutGerantInput | GerantEmployeeAssignmentCreateOrConnectWithoutGerantInput[]
    upsert?: GerantEmployeeAssignmentUpsertWithWhereUniqueWithoutGerantInput | GerantEmployeeAssignmentUpsertWithWhereUniqueWithoutGerantInput[]
    createMany?: GerantEmployeeAssignmentCreateManyGerantInputEnvelope
    set?: GerantEmployeeAssignmentWhereUniqueInput | GerantEmployeeAssignmentWhereUniqueInput[]
    disconnect?: GerantEmployeeAssignmentWhereUniqueInput | GerantEmployeeAssignmentWhereUniqueInput[]
    delete?: GerantEmployeeAssignmentWhereUniqueInput | GerantEmployeeAssignmentWhereUniqueInput[]
    connect?: GerantEmployeeAssignmentWhereUniqueInput | GerantEmployeeAssignmentWhereUniqueInput[]
    update?: GerantEmployeeAssignmentUpdateWithWhereUniqueWithoutGerantInput | GerantEmployeeAssignmentUpdateWithWhereUniqueWithoutGerantInput[]
    updateMany?: GerantEmployeeAssignmentUpdateManyWithWhereWithoutGerantInput | GerantEmployeeAssignmentUpdateManyWithWhereWithoutGerantInput[]
    deleteMany?: GerantEmployeeAssignmentScalarWhereInput | GerantEmployeeAssignmentScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleInput | UserUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleInput | UserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleInput | UserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleInput | UserUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleInput | UserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleInput | UserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAdminInput = {
    create?: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAdminNestedInput = {
    create?: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminInput
    upsert?: UserUpsertWithoutAdminInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdminInput, UserUpdateWithoutAdminInput>, UserUncheckedUpdateWithoutAdminInput>
  }

  export type EmployeeCreateNestedOneWithoutGerant_assignmentsInput = {
    create?: XOR<EmployeeCreateWithoutGerant_assignmentsInput, EmployeeUncheckedCreateWithoutGerant_assignmentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutGerant_assignmentsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGerant_assignmentsInput = {
    create?: XOR<UserCreateWithoutGerant_assignmentsInput, UserUncheckedCreateWithoutGerant_assignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGerant_assignmentsInput
    connect?: UserWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutGerant_assignmentsNestedInput = {
    create?: XOR<EmployeeCreateWithoutGerant_assignmentsInput, EmployeeUncheckedCreateWithoutGerant_assignmentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutGerant_assignmentsInput
    upsert?: EmployeeUpsertWithoutGerant_assignmentsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutGerant_assignmentsInput, EmployeeUpdateWithoutGerant_assignmentsInput>, EmployeeUncheckedUpdateWithoutGerant_assignmentsInput>
  }

  export type UserUpdateOneRequiredWithoutGerant_assignmentsNestedInput = {
    create?: XOR<UserCreateWithoutGerant_assignmentsInput, UserUncheckedCreateWithoutGerant_assignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGerant_assignmentsInput
    upsert?: UserUpsertWithoutGerant_assignmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGerant_assignmentsInput, UserUpdateWithoutGerant_assignmentsInput>, UserUncheckedUpdateWithoutGerant_assignmentsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type CategoryCreateWithoutArticlesInput = {
    id?: string
    name: string
    description?: string | null
    commandes?: BonDeCommandeCategoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutArticlesInput = {
    id?: string
    name: string
    description?: string | null
    commandes?: BonDeCommandeCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutArticlesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutArticlesInput, CategoryUncheckedCreateWithoutArticlesInput>
  }

  export type BonDeCommandeCategoryCreateWithoutArticleInput = {
    id?: string
    quantite_a_demander?: Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: Decimal | DecimalJsLike | number | string | null
    bon_de_commande: BonDeCommandeCreateNestedOneWithoutCategoriesInput
    category: CategoryCreateNestedOneWithoutCommandesInput
  }

  export type BonDeCommandeCategoryUncheckedCreateWithoutArticleInput = {
    id?: string
    category_id: string
    bon_de_commande_id: string
    quantite_a_demander?: Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: Decimal | DecimalJsLike | number | string | null
  }

  export type BonDeCommandeCategoryCreateOrConnectWithoutArticleInput = {
    where: BonDeCommandeCategoryWhereUniqueInput
    create: XOR<BonDeCommandeCategoryCreateWithoutArticleInput, BonDeCommandeCategoryUncheckedCreateWithoutArticleInput>
  }

  export type BonDeCommandeCategoryCreateManyArticleInputEnvelope = {
    data: BonDeCommandeCategoryCreateManyArticleInput | BonDeCommandeCategoryCreateManyArticleInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutArticlesInput = {
    update: XOR<CategoryUpdateWithoutArticlesInput, CategoryUncheckedUpdateWithoutArticlesInput>
    create: XOR<CategoryCreateWithoutArticlesInput, CategoryUncheckedCreateWithoutArticlesInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutArticlesInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutArticlesInput, CategoryUncheckedUpdateWithoutArticlesInput>
  }

  export type CategoryUpdateWithoutArticlesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    commandes?: BonDeCommandeCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutArticlesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    commandes?: BonDeCommandeCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type BonDeCommandeCategoryUpsertWithWhereUniqueWithoutArticleInput = {
    where: BonDeCommandeCategoryWhereUniqueInput
    update: XOR<BonDeCommandeCategoryUpdateWithoutArticleInput, BonDeCommandeCategoryUncheckedUpdateWithoutArticleInput>
    create: XOR<BonDeCommandeCategoryCreateWithoutArticleInput, BonDeCommandeCategoryUncheckedCreateWithoutArticleInput>
  }

  export type BonDeCommandeCategoryUpdateWithWhereUniqueWithoutArticleInput = {
    where: BonDeCommandeCategoryWhereUniqueInput
    data: XOR<BonDeCommandeCategoryUpdateWithoutArticleInput, BonDeCommandeCategoryUncheckedUpdateWithoutArticleInput>
  }

  export type BonDeCommandeCategoryUpdateManyWithWhereWithoutArticleInput = {
    where: BonDeCommandeCategoryScalarWhereInput
    data: XOR<BonDeCommandeCategoryUpdateManyMutationInput, BonDeCommandeCategoryUncheckedUpdateManyWithoutArticleInput>
  }

  export type BonDeCommandeCategoryScalarWhereInput = {
    AND?: BonDeCommandeCategoryScalarWhereInput | BonDeCommandeCategoryScalarWhereInput[]
    OR?: BonDeCommandeCategoryScalarWhereInput[]
    NOT?: BonDeCommandeCategoryScalarWhereInput | BonDeCommandeCategoryScalarWhereInput[]
    id?: StringFilter<"BonDeCommandeCategory"> | string
    category_id?: StringFilter<"BonDeCommandeCategory"> | string
    bon_de_commande_id?: StringFilter<"BonDeCommandeCategory"> | string
    article_id?: StringNullableFilter<"BonDeCommandeCategory"> | string | null
    quantite_a_demander?: DecimalNullableFilter<"BonDeCommandeCategory"> | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: DecimalNullableFilter<"BonDeCommandeCategory"> | Decimal | DecimalJsLike | number | string | null
  }

  export type ArticleCreateWithoutCategoryInput = {
    id?: string
    name: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    collisage: string
    type?: string
    numero?: number | null
    quantite_a_demander?: Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: Decimal | DecimalJsLike | number | string | null
    bon_de_commande_categories?: BonDeCommandeCategoryCreateNestedManyWithoutArticleInput
  }

  export type ArticleUncheckedCreateWithoutCategoryInput = {
    id?: string
    name: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    collisage: string
    type?: string
    numero?: number | null
    quantite_a_demander?: Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: Decimal | DecimalJsLike | number | string | null
    bon_de_commande_categories?: BonDeCommandeCategoryUncheckedCreateNestedManyWithoutArticleInput
  }

  export type ArticleCreateOrConnectWithoutCategoryInput = {
    where: ArticleWhereUniqueInput
    create: XOR<ArticleCreateWithoutCategoryInput, ArticleUncheckedCreateWithoutCategoryInput>
  }

  export type ArticleCreateManyCategoryInputEnvelope = {
    data: ArticleCreateManyCategoryInput | ArticleCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type BonDeCommandeCategoryCreateWithoutCategoryInput = {
    id?: string
    quantite_a_demander?: Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: Decimal | DecimalJsLike | number | string | null
    article?: ArticleCreateNestedOneWithoutBon_de_commande_categoriesInput
    bon_de_commande: BonDeCommandeCreateNestedOneWithoutCategoriesInput
  }

  export type BonDeCommandeCategoryUncheckedCreateWithoutCategoryInput = {
    id?: string
    bon_de_commande_id: string
    article_id?: string | null
    quantite_a_demander?: Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: Decimal | DecimalJsLike | number | string | null
  }

  export type BonDeCommandeCategoryCreateOrConnectWithoutCategoryInput = {
    where: BonDeCommandeCategoryWhereUniqueInput
    create: XOR<BonDeCommandeCategoryCreateWithoutCategoryInput, BonDeCommandeCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type BonDeCommandeCategoryCreateManyCategoryInputEnvelope = {
    data: BonDeCommandeCategoryCreateManyCategoryInput | BonDeCommandeCategoryCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type ArticleUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ArticleWhereUniqueInput
    update: XOR<ArticleUpdateWithoutCategoryInput, ArticleUncheckedUpdateWithoutCategoryInput>
    create: XOR<ArticleCreateWithoutCategoryInput, ArticleUncheckedCreateWithoutCategoryInput>
  }

  export type ArticleUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ArticleWhereUniqueInput
    data: XOR<ArticleUpdateWithoutCategoryInput, ArticleUncheckedUpdateWithoutCategoryInput>
  }

  export type ArticleUpdateManyWithWhereWithoutCategoryInput = {
    where: ArticleScalarWhereInput
    data: XOR<ArticleUpdateManyMutationInput, ArticleUncheckedUpdateManyWithoutCategoryInput>
  }

  export type ArticleScalarWhereInput = {
    AND?: ArticleScalarWhereInput | ArticleScalarWhereInput[]
    OR?: ArticleScalarWhereInput[]
    NOT?: ArticleScalarWhereInput | ArticleScalarWhereInput[]
    id?: StringFilter<"Article"> | string
    name?: StringFilter<"Article"> | string
    description?: StringNullableFilter<"Article"> | string | null
    price?: DecimalNullableFilter<"Article"> | Decimal | DecimalJsLike | number | string | null
    category_id?: StringFilter<"Article"> | string
    collisage?: StringFilter<"Article"> | string
    type?: StringFilter<"Article"> | string
    numero?: IntNullableFilter<"Article"> | number | null
    quantite_a_demander?: DecimalNullableFilter<"Article"> | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: DecimalNullableFilter<"Article"> | Decimal | DecimalJsLike | number | string | null
  }

  export type BonDeCommandeCategoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: BonDeCommandeCategoryWhereUniqueInput
    update: XOR<BonDeCommandeCategoryUpdateWithoutCategoryInput, BonDeCommandeCategoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<BonDeCommandeCategoryCreateWithoutCategoryInput, BonDeCommandeCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type BonDeCommandeCategoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: BonDeCommandeCategoryWhereUniqueInput
    data: XOR<BonDeCommandeCategoryUpdateWithoutCategoryInput, BonDeCommandeCategoryUncheckedUpdateWithoutCategoryInput>
  }

  export type BonDeCommandeCategoryUpdateManyWithWhereWithoutCategoryInput = {
    where: BonDeCommandeCategoryScalarWhereInput
    data: XOR<BonDeCommandeCategoryUpdateManyMutationInput, BonDeCommandeCategoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type ArticleCreateWithoutBon_de_commande_categoriesInput = {
    id?: string
    name: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    collisage: string
    type?: string
    numero?: number | null
    quantite_a_demander?: Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: Decimal | DecimalJsLike | number | string | null
    category: CategoryCreateNestedOneWithoutArticlesInput
  }

  export type ArticleUncheckedCreateWithoutBon_de_commande_categoriesInput = {
    id?: string
    name: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    category_id: string
    collisage: string
    type?: string
    numero?: number | null
    quantite_a_demander?: Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: Decimal | DecimalJsLike | number | string | null
  }

  export type ArticleCreateOrConnectWithoutBon_de_commande_categoriesInput = {
    where: ArticleWhereUniqueInput
    create: XOR<ArticleCreateWithoutBon_de_commande_categoriesInput, ArticleUncheckedCreateWithoutBon_de_commande_categoriesInput>
  }

  export type BonDeCommandeCreateWithoutCategoriesInput = {
    id?: string
    created_at?: Date | string
    description: string
    status: string
    code: string
    target_date?: Date | string
    employee: EmployeeCreateNestedOneWithoutBons_de_commandeInput
  }

  export type BonDeCommandeUncheckedCreateWithoutCategoriesInput = {
    id?: string
    created_at?: Date | string
    description: string
    status: string
    employee_id: string
    code: string
    target_date?: Date | string
  }

  export type BonDeCommandeCreateOrConnectWithoutCategoriesInput = {
    where: BonDeCommandeWhereUniqueInput
    create: XOR<BonDeCommandeCreateWithoutCategoriesInput, BonDeCommandeUncheckedCreateWithoutCategoriesInput>
  }

  export type CategoryCreateWithoutCommandesInput = {
    id?: string
    name: string
    description?: string | null
    articles?: ArticleCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutCommandesInput = {
    id?: string
    name: string
    description?: string | null
    articles?: ArticleUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutCommandesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutCommandesInput, CategoryUncheckedCreateWithoutCommandesInput>
  }

  export type ArticleUpsertWithoutBon_de_commande_categoriesInput = {
    update: XOR<ArticleUpdateWithoutBon_de_commande_categoriesInput, ArticleUncheckedUpdateWithoutBon_de_commande_categoriesInput>
    create: XOR<ArticleCreateWithoutBon_de_commande_categoriesInput, ArticleUncheckedCreateWithoutBon_de_commande_categoriesInput>
    where?: ArticleWhereInput
  }

  export type ArticleUpdateToOneWithWhereWithoutBon_de_commande_categoriesInput = {
    where?: ArticleWhereInput
    data: XOR<ArticleUpdateWithoutBon_de_commande_categoriesInput, ArticleUncheckedUpdateWithoutBon_de_commande_categoriesInput>
  }

  export type ArticleUpdateWithoutBon_de_commande_categoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    collisage?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    quantite_a_demander?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category?: CategoryUpdateOneRequiredWithoutArticlesNestedInput
  }

  export type ArticleUncheckedUpdateWithoutBon_de_commande_categoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category_id?: StringFieldUpdateOperationsInput | string
    collisage?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    quantite_a_demander?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type BonDeCommandeUpsertWithoutCategoriesInput = {
    update: XOR<BonDeCommandeUpdateWithoutCategoriesInput, BonDeCommandeUncheckedUpdateWithoutCategoriesInput>
    create: XOR<BonDeCommandeCreateWithoutCategoriesInput, BonDeCommandeUncheckedCreateWithoutCategoriesInput>
    where?: BonDeCommandeWhereInput
  }

  export type BonDeCommandeUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: BonDeCommandeWhereInput
    data: XOR<BonDeCommandeUpdateWithoutCategoriesInput, BonDeCommandeUncheckedUpdateWithoutCategoriesInput>
  }

  export type BonDeCommandeUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    target_date?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutBons_de_commandeNestedInput
  }

  export type BonDeCommandeUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    target_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUpsertWithoutCommandesInput = {
    update: XOR<CategoryUpdateWithoutCommandesInput, CategoryUncheckedUpdateWithoutCommandesInput>
    create: XOR<CategoryCreateWithoutCommandesInput, CategoryUncheckedCreateWithoutCommandesInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutCommandesInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutCommandesInput, CategoryUncheckedUpdateWithoutCommandesInput>
  }

  export type CategoryUpdateWithoutCommandesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    articles?: ArticleUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutCommandesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    articles?: ArticleUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type EmployeeCreateWithoutBons_de_commandeInput = {
    id?: string
    user: UserCreateNestedOneWithoutEmployeeInput
    gerant_assignments?: GerantEmployeeAssignmentCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutBons_de_commandeInput = {
    id?: string
    user_id: string
    gerant_assignments?: GerantEmployeeAssignmentUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutBons_de_commandeInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutBons_de_commandeInput, EmployeeUncheckedCreateWithoutBons_de_commandeInput>
  }

  export type BonDeCommandeCategoryCreateWithoutBon_de_commandeInput = {
    id?: string
    quantite_a_demander?: Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: Decimal | DecimalJsLike | number | string | null
    article?: ArticleCreateNestedOneWithoutBon_de_commande_categoriesInput
    category: CategoryCreateNestedOneWithoutCommandesInput
  }

  export type BonDeCommandeCategoryUncheckedCreateWithoutBon_de_commandeInput = {
    id?: string
    category_id: string
    article_id?: string | null
    quantite_a_demander?: Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: Decimal | DecimalJsLike | number | string | null
  }

  export type BonDeCommandeCategoryCreateOrConnectWithoutBon_de_commandeInput = {
    where: BonDeCommandeCategoryWhereUniqueInput
    create: XOR<BonDeCommandeCategoryCreateWithoutBon_de_commandeInput, BonDeCommandeCategoryUncheckedCreateWithoutBon_de_commandeInput>
  }

  export type BonDeCommandeCategoryCreateManyBon_de_commandeInputEnvelope = {
    data: BonDeCommandeCategoryCreateManyBon_de_commandeInput | BonDeCommandeCategoryCreateManyBon_de_commandeInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeUpsertWithoutBons_de_commandeInput = {
    update: XOR<EmployeeUpdateWithoutBons_de_commandeInput, EmployeeUncheckedUpdateWithoutBons_de_commandeInput>
    create: XOR<EmployeeCreateWithoutBons_de_commandeInput, EmployeeUncheckedCreateWithoutBons_de_commandeInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutBons_de_commandeInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutBons_de_commandeInput, EmployeeUncheckedUpdateWithoutBons_de_commandeInput>
  }

  export type EmployeeUpdateWithoutBons_de_commandeInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    gerant_assignments?: GerantEmployeeAssignmentUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutBons_de_commandeInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    gerant_assignments?: GerantEmployeeAssignmentUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type BonDeCommandeCategoryUpsertWithWhereUniqueWithoutBon_de_commandeInput = {
    where: BonDeCommandeCategoryWhereUniqueInput
    update: XOR<BonDeCommandeCategoryUpdateWithoutBon_de_commandeInput, BonDeCommandeCategoryUncheckedUpdateWithoutBon_de_commandeInput>
    create: XOR<BonDeCommandeCategoryCreateWithoutBon_de_commandeInput, BonDeCommandeCategoryUncheckedCreateWithoutBon_de_commandeInput>
  }

  export type BonDeCommandeCategoryUpdateWithWhereUniqueWithoutBon_de_commandeInput = {
    where: BonDeCommandeCategoryWhereUniqueInput
    data: XOR<BonDeCommandeCategoryUpdateWithoutBon_de_commandeInput, BonDeCommandeCategoryUncheckedUpdateWithoutBon_de_commandeInput>
  }

  export type BonDeCommandeCategoryUpdateManyWithWhereWithoutBon_de_commandeInput = {
    where: BonDeCommandeCategoryScalarWhereInput
    data: XOR<BonDeCommandeCategoryUpdateManyMutationInput, BonDeCommandeCategoryUncheckedUpdateManyWithoutBon_de_commandeInput>
  }

  export type BonDeCommandeCreateWithoutEmployeeInput = {
    id?: string
    created_at?: Date | string
    description: string
    status: string
    code: string
    target_date?: Date | string
    categories?: BonDeCommandeCategoryCreateNestedManyWithoutBon_de_commandeInput
  }

  export type BonDeCommandeUncheckedCreateWithoutEmployeeInput = {
    id?: string
    created_at?: Date | string
    description: string
    status: string
    code: string
    target_date?: Date | string
    categories?: BonDeCommandeCategoryUncheckedCreateNestedManyWithoutBon_de_commandeInput
  }

  export type BonDeCommandeCreateOrConnectWithoutEmployeeInput = {
    where: BonDeCommandeWhereUniqueInput
    create: XOR<BonDeCommandeCreateWithoutEmployeeInput, BonDeCommandeUncheckedCreateWithoutEmployeeInput>
  }

  export type BonDeCommandeCreateManyEmployeeInputEnvelope = {
    data: BonDeCommandeCreateManyEmployeeInput | BonDeCommandeCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutEmployeeInput = {
    id?: string
    username: string
    email: string
    password: string
    refreshToken?: string | null
    admin?: AdminCreateNestedOneWithoutUserInput
    gerant_assignments?: GerantEmployeeAssignmentCreateNestedManyWithoutGerantInput
    role: RoleCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutEmployeeInput = {
    id?: string
    username: string
    email: string
    password: string
    role_id: string
    refreshToken?: string | null
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    gerant_assignments?: GerantEmployeeAssignmentUncheckedCreateNestedManyWithoutGerantInput
  }

  export type UserCreateOrConnectWithoutEmployeeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
  }

  export type GerantEmployeeAssignmentCreateWithoutEmployeeInput = {
    id?: string
    created_at?: Date | string
    gerant: UserCreateNestedOneWithoutGerant_assignmentsInput
  }

  export type GerantEmployeeAssignmentUncheckedCreateWithoutEmployeeInput = {
    id?: string
    gerant_id: string
    created_at?: Date | string
  }

  export type GerantEmployeeAssignmentCreateOrConnectWithoutEmployeeInput = {
    where: GerantEmployeeAssignmentWhereUniqueInput
    create: XOR<GerantEmployeeAssignmentCreateWithoutEmployeeInput, GerantEmployeeAssignmentUncheckedCreateWithoutEmployeeInput>
  }

  export type GerantEmployeeAssignmentCreateManyEmployeeInputEnvelope = {
    data: GerantEmployeeAssignmentCreateManyEmployeeInput | GerantEmployeeAssignmentCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type BonDeCommandeUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: BonDeCommandeWhereUniqueInput
    update: XOR<BonDeCommandeUpdateWithoutEmployeeInput, BonDeCommandeUncheckedUpdateWithoutEmployeeInput>
    create: XOR<BonDeCommandeCreateWithoutEmployeeInput, BonDeCommandeUncheckedCreateWithoutEmployeeInput>
  }

  export type BonDeCommandeUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: BonDeCommandeWhereUniqueInput
    data: XOR<BonDeCommandeUpdateWithoutEmployeeInput, BonDeCommandeUncheckedUpdateWithoutEmployeeInput>
  }

  export type BonDeCommandeUpdateManyWithWhereWithoutEmployeeInput = {
    where: BonDeCommandeScalarWhereInput
    data: XOR<BonDeCommandeUpdateManyMutationInput, BonDeCommandeUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type BonDeCommandeScalarWhereInput = {
    AND?: BonDeCommandeScalarWhereInput | BonDeCommandeScalarWhereInput[]
    OR?: BonDeCommandeScalarWhereInput[]
    NOT?: BonDeCommandeScalarWhereInput | BonDeCommandeScalarWhereInput[]
    id?: StringFilter<"BonDeCommande"> | string
    created_at?: DateTimeFilter<"BonDeCommande"> | Date | string
    description?: StringFilter<"BonDeCommande"> | string
    status?: StringFilter<"BonDeCommande"> | string
    employee_id?: StringFilter<"BonDeCommande"> | string
    code?: StringFilter<"BonDeCommande"> | string
    target_date?: DateTimeFilter<"BonDeCommande"> | Date | string
  }

  export type UserUpsertWithoutEmployeeInput = {
    update: XOR<UserUpdateWithoutEmployeeInput, UserUncheckedUpdateWithoutEmployeeInput>
    create: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEmployeeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEmployeeInput, UserUncheckedUpdateWithoutEmployeeInput>
  }

  export type UserUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: AdminUpdateOneWithoutUserNestedInput
    gerant_assignments?: GerantEmployeeAssignmentUpdateManyWithoutGerantNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role_id?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    gerant_assignments?: GerantEmployeeAssignmentUncheckedUpdateManyWithoutGerantNestedInput
  }

  export type GerantEmployeeAssignmentUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: GerantEmployeeAssignmentWhereUniqueInput
    update: XOR<GerantEmployeeAssignmentUpdateWithoutEmployeeInput, GerantEmployeeAssignmentUncheckedUpdateWithoutEmployeeInput>
    create: XOR<GerantEmployeeAssignmentCreateWithoutEmployeeInput, GerantEmployeeAssignmentUncheckedCreateWithoutEmployeeInput>
  }

  export type GerantEmployeeAssignmentUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: GerantEmployeeAssignmentWhereUniqueInput
    data: XOR<GerantEmployeeAssignmentUpdateWithoutEmployeeInput, GerantEmployeeAssignmentUncheckedUpdateWithoutEmployeeInput>
  }

  export type GerantEmployeeAssignmentUpdateManyWithWhereWithoutEmployeeInput = {
    where: GerantEmployeeAssignmentScalarWhereInput
    data: XOR<GerantEmployeeAssignmentUpdateManyMutationInput, GerantEmployeeAssignmentUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type GerantEmployeeAssignmentScalarWhereInput = {
    AND?: GerantEmployeeAssignmentScalarWhereInput | GerantEmployeeAssignmentScalarWhereInput[]
    OR?: GerantEmployeeAssignmentScalarWhereInput[]
    NOT?: GerantEmployeeAssignmentScalarWhereInput | GerantEmployeeAssignmentScalarWhereInput[]
    id?: StringFilter<"GerantEmployeeAssignment"> | string
    gerant_id?: StringFilter<"GerantEmployeeAssignment"> | string
    employee_id?: StringFilter<"GerantEmployeeAssignment"> | string
    created_at?: DateTimeFilter<"GerantEmployeeAssignment"> | Date | string
  }

  export type AdminCreateWithoutUserInput = {
    id?: string
  }

  export type AdminUncheckedCreateWithoutUserInput = {
    id?: string
  }

  export type AdminCreateOrConnectWithoutUserInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
  }

  export type EmployeeCreateWithoutUserInput = {
    id?: string
    bons_de_commande?: BonDeCommandeCreateNestedManyWithoutEmployeeInput
    gerant_assignments?: GerantEmployeeAssignmentCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutUserInput = {
    id?: string
    bons_de_commande?: BonDeCommandeUncheckedCreateNestedManyWithoutEmployeeInput
    gerant_assignments?: GerantEmployeeAssignmentUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutUserInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
  }

  export type GerantEmployeeAssignmentCreateWithoutGerantInput = {
    id?: string
    created_at?: Date | string
    employee: EmployeeCreateNestedOneWithoutGerant_assignmentsInput
  }

  export type GerantEmployeeAssignmentUncheckedCreateWithoutGerantInput = {
    id?: string
    employee_id: string
    created_at?: Date | string
  }

  export type GerantEmployeeAssignmentCreateOrConnectWithoutGerantInput = {
    where: GerantEmployeeAssignmentWhereUniqueInput
    create: XOR<GerantEmployeeAssignmentCreateWithoutGerantInput, GerantEmployeeAssignmentUncheckedCreateWithoutGerantInput>
  }

  export type GerantEmployeeAssignmentCreateManyGerantInputEnvelope = {
    data: GerantEmployeeAssignmentCreateManyGerantInput | GerantEmployeeAssignmentCreateManyGerantInput[]
    skipDuplicates?: boolean
  }

  export type RoleCreateWithoutUsersInput = {
    id?: string
    name: string
  }

  export type RoleUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
  }

  export type RoleCreateOrConnectWithoutUsersInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type AdminUpsertWithoutUserInput = {
    update: XOR<AdminUpdateWithoutUserInput, AdminUncheckedUpdateWithoutUserInput>
    create: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutUserInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutUserInput, AdminUncheckedUpdateWithoutUserInput>
  }

  export type AdminUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeUpsertWithoutUserInput = {
    update: XOR<EmployeeUpdateWithoutUserInput, EmployeeUncheckedUpdateWithoutUserInput>
    create: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUserInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUserInput, EmployeeUncheckedUpdateWithoutUserInput>
  }

  export type EmployeeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    bons_de_commande?: BonDeCommandeUpdateManyWithoutEmployeeNestedInput
    gerant_assignments?: GerantEmployeeAssignmentUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    bons_de_commande?: BonDeCommandeUncheckedUpdateManyWithoutEmployeeNestedInput
    gerant_assignments?: GerantEmployeeAssignmentUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type GerantEmployeeAssignmentUpsertWithWhereUniqueWithoutGerantInput = {
    where: GerantEmployeeAssignmentWhereUniqueInput
    update: XOR<GerantEmployeeAssignmentUpdateWithoutGerantInput, GerantEmployeeAssignmentUncheckedUpdateWithoutGerantInput>
    create: XOR<GerantEmployeeAssignmentCreateWithoutGerantInput, GerantEmployeeAssignmentUncheckedCreateWithoutGerantInput>
  }

  export type GerantEmployeeAssignmentUpdateWithWhereUniqueWithoutGerantInput = {
    where: GerantEmployeeAssignmentWhereUniqueInput
    data: XOR<GerantEmployeeAssignmentUpdateWithoutGerantInput, GerantEmployeeAssignmentUncheckedUpdateWithoutGerantInput>
  }

  export type GerantEmployeeAssignmentUpdateManyWithWhereWithoutGerantInput = {
    where: GerantEmployeeAssignmentScalarWhereInput
    data: XOR<GerantEmployeeAssignmentUpdateManyMutationInput, GerantEmployeeAssignmentUncheckedUpdateManyWithoutGerantInput>
  }

  export type RoleUpsertWithoutUsersInput = {
    update: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutUsersInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type RoleUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutRoleInput = {
    id?: string
    username: string
    email: string
    password: string
    refreshToken?: string | null
    admin?: AdminCreateNestedOneWithoutUserInput
    employee?: EmployeeCreateNestedOneWithoutUserInput
    gerant_assignments?: GerantEmployeeAssignmentCreateNestedManyWithoutGerantInput
  }

  export type UserUncheckedCreateWithoutRoleInput = {
    id?: string
    username: string
    email: string
    password: string
    refreshToken?: string | null
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    gerant_assignments?: GerantEmployeeAssignmentUncheckedCreateNestedManyWithoutGerantInput
  }

  export type UserCreateOrConnectWithoutRoleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserCreateManyRoleInputEnvelope = {
    data: UserCreateManyRoleInput | UserCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
  }

  export type UserUpdateManyWithWhereWithoutRoleInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRoleInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role_id?: StringFilter<"User"> | string
    refreshToken?: StringNullableFilter<"User"> | string | null
  }

  export type UserCreateWithoutAdminInput = {
    id?: string
    username: string
    email: string
    password: string
    refreshToken?: string | null
    employee?: EmployeeCreateNestedOneWithoutUserInput
    gerant_assignments?: GerantEmployeeAssignmentCreateNestedManyWithoutGerantInput
    role: RoleCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutAdminInput = {
    id?: string
    username: string
    email: string
    password: string
    role_id: string
    refreshToken?: string | null
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    gerant_assignments?: GerantEmployeeAssignmentUncheckedCreateNestedManyWithoutGerantInput
  }

  export type UserCreateOrConnectWithoutAdminInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
  }

  export type UserUpsertWithoutAdminInput = {
    update: XOR<UserUpdateWithoutAdminInput, UserUncheckedUpdateWithoutAdminInput>
    create: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdminInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdminInput, UserUncheckedUpdateWithoutAdminInput>
  }

  export type UserUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    gerant_assignments?: GerantEmployeeAssignmentUpdateManyWithoutGerantNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role_id?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    gerant_assignments?: GerantEmployeeAssignmentUncheckedUpdateManyWithoutGerantNestedInput
  }

  export type EmployeeCreateWithoutGerant_assignmentsInput = {
    id?: string
    bons_de_commande?: BonDeCommandeCreateNestedManyWithoutEmployeeInput
    user: UserCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutGerant_assignmentsInput = {
    id?: string
    user_id: string
    bons_de_commande?: BonDeCommandeUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutGerant_assignmentsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutGerant_assignmentsInput, EmployeeUncheckedCreateWithoutGerant_assignmentsInput>
  }

  export type UserCreateWithoutGerant_assignmentsInput = {
    id?: string
    username: string
    email: string
    password: string
    refreshToken?: string | null
    admin?: AdminCreateNestedOneWithoutUserInput
    employee?: EmployeeCreateNestedOneWithoutUserInput
    role: RoleCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutGerant_assignmentsInput = {
    id?: string
    username: string
    email: string
    password: string
    role_id: string
    refreshToken?: string | null
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGerant_assignmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGerant_assignmentsInput, UserUncheckedCreateWithoutGerant_assignmentsInput>
  }

  export type EmployeeUpsertWithoutGerant_assignmentsInput = {
    update: XOR<EmployeeUpdateWithoutGerant_assignmentsInput, EmployeeUncheckedUpdateWithoutGerant_assignmentsInput>
    create: XOR<EmployeeCreateWithoutGerant_assignmentsInput, EmployeeUncheckedCreateWithoutGerant_assignmentsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutGerant_assignmentsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutGerant_assignmentsInput, EmployeeUncheckedUpdateWithoutGerant_assignmentsInput>
  }

  export type EmployeeUpdateWithoutGerant_assignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    bons_de_commande?: BonDeCommandeUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutGerant_assignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    bons_de_commande?: BonDeCommandeUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type UserUpsertWithoutGerant_assignmentsInput = {
    update: XOR<UserUpdateWithoutGerant_assignmentsInput, UserUncheckedUpdateWithoutGerant_assignmentsInput>
    create: XOR<UserCreateWithoutGerant_assignmentsInput, UserUncheckedCreateWithoutGerant_assignmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGerant_assignmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGerant_assignmentsInput, UserUncheckedUpdateWithoutGerant_assignmentsInput>
  }

  export type UserUpdateWithoutGerant_assignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: AdminUpdateOneWithoutUserNestedInput
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutGerant_assignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role_id?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
  }

  export type BonDeCommandeCategoryCreateManyArticleInput = {
    id?: string
    category_id: string
    bon_de_commande_id: string
    quantite_a_demander?: Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: Decimal | DecimalJsLike | number | string | null
  }

  export type BonDeCommandeCategoryUpdateWithoutArticleInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantite_a_demander?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bon_de_commande?: BonDeCommandeUpdateOneRequiredWithoutCategoriesNestedInput
    category?: CategoryUpdateOneRequiredWithoutCommandesNestedInput
  }

  export type BonDeCommandeCategoryUncheckedUpdateWithoutArticleInput = {
    id?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    bon_de_commande_id?: StringFieldUpdateOperationsInput | string
    quantite_a_demander?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type BonDeCommandeCategoryUncheckedUpdateManyWithoutArticleInput = {
    id?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    bon_de_commande_id?: StringFieldUpdateOperationsInput | string
    quantite_a_demander?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ArticleCreateManyCategoryInput = {
    id?: string
    name: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    collisage: string
    type?: string
    numero?: number | null
    quantite_a_demander?: Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: Decimal | DecimalJsLike | number | string | null
  }

  export type BonDeCommandeCategoryCreateManyCategoryInput = {
    id?: string
    bon_de_commande_id: string
    article_id?: string | null
    quantite_a_demander?: Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: Decimal | DecimalJsLike | number | string | null
  }

  export type ArticleUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    collisage?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    quantite_a_demander?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bon_de_commande_categories?: BonDeCommandeCategoryUpdateManyWithoutArticleNestedInput
  }

  export type ArticleUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    collisage?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    quantite_a_demander?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bon_de_commande_categories?: BonDeCommandeCategoryUncheckedUpdateManyWithoutArticleNestedInput
  }

  export type ArticleUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    collisage?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    quantite_a_demander?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type BonDeCommandeCategoryUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantite_a_demander?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    article?: ArticleUpdateOneWithoutBon_de_commande_categoriesNestedInput
    bon_de_commande?: BonDeCommandeUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type BonDeCommandeCategoryUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    bon_de_commande_id?: StringFieldUpdateOperationsInput | string
    article_id?: NullableStringFieldUpdateOperationsInput | string | null
    quantite_a_demander?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type BonDeCommandeCategoryUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    bon_de_commande_id?: StringFieldUpdateOperationsInput | string
    article_id?: NullableStringFieldUpdateOperationsInput | string | null
    quantite_a_demander?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type BonDeCommandeCategoryCreateManyBon_de_commandeInput = {
    id?: string
    category_id: string
    article_id?: string | null
    quantite_a_demander?: Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: Decimal | DecimalJsLike | number | string | null
  }

  export type BonDeCommandeCategoryUpdateWithoutBon_de_commandeInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantite_a_demander?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    article?: ArticleUpdateOneWithoutBon_de_commande_categoriesNestedInput
    category?: CategoryUpdateOneRequiredWithoutCommandesNestedInput
  }

  export type BonDeCommandeCategoryUncheckedUpdateWithoutBon_de_commandeInput = {
    id?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    article_id?: NullableStringFieldUpdateOperationsInput | string | null
    quantite_a_demander?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type BonDeCommandeCategoryUncheckedUpdateManyWithoutBon_de_commandeInput = {
    id?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    article_id?: NullableStringFieldUpdateOperationsInput | string | null
    quantite_a_demander?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    quantite_a_stocker?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type BonDeCommandeCreateManyEmployeeInput = {
    id?: string
    created_at?: Date | string
    description: string
    status: string
    code: string
    target_date?: Date | string
  }

  export type GerantEmployeeAssignmentCreateManyEmployeeInput = {
    id?: string
    gerant_id: string
    created_at?: Date | string
  }

  export type BonDeCommandeUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    target_date?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: BonDeCommandeCategoryUpdateManyWithoutBon_de_commandeNestedInput
  }

  export type BonDeCommandeUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    target_date?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: BonDeCommandeCategoryUncheckedUpdateManyWithoutBon_de_commandeNestedInput
  }

  export type BonDeCommandeUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    target_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GerantEmployeeAssignmentUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    gerant?: UserUpdateOneRequiredWithoutGerant_assignmentsNestedInput
  }

  export type GerantEmployeeAssignmentUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    gerant_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GerantEmployeeAssignmentUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    gerant_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GerantEmployeeAssignmentCreateManyGerantInput = {
    id?: string
    employee_id: string
    created_at?: Date | string
  }

  export type GerantEmployeeAssignmentUpdateWithoutGerantInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutGerant_assignmentsNestedInput
  }

  export type GerantEmployeeAssignmentUncheckedUpdateWithoutGerantInput = {
    id?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GerantEmployeeAssignmentUncheckedUpdateManyWithoutGerantInput = {
    id?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyRoleInput = {
    id?: string
    username: string
    email: string
    password: string
    refreshToken?: string | null
  }

  export type UserUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: AdminUpdateOneWithoutUserNestedInput
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    gerant_assignments?: GerantEmployeeAssignmentUpdateManyWithoutGerantNestedInput
  }

  export type UserUncheckedUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    gerant_assignments?: GerantEmployeeAssignmentUncheckedUpdateManyWithoutGerantNestedInput
  }

  export type UserUncheckedUpdateManyWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}