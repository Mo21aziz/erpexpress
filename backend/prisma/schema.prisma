generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Article {
  id                         String                  @id @default(uuid())
  name                       String
  description                String?
  numero                     Int?
  price                      Decimal?                @db.Decimal(10, 2)
  collisage                  String
  type                       String                  @default("catering")
  category_id                String
  quantite_a_stocker         Decimal?                @db.Decimal(10, 2)
  quantite_a_demander        Decimal?                @db.Decimal(10, 2)
  category                   Category                @relation(fields: [category_id], references: [id])
  bon_de_commande_categories BonDeCommandeCategory[]

  @@index([category_id], map: "Article_category_id_fkey")
}

model Category {
  id          String                  @id @default(uuid())
  name        String
  description String?
  articles    Article[]
  commandes   BonDeCommandeCategory[]
}

model BonDeCommandeCategory {
  id                  String        @id @default(uuid())
  category_id         String
  article_id          String?
  bon_de_commande_id  String
  quantite_a_stocker  Decimal?      @db.Decimal(10, 2) @default(0)
  quantite_a_demander Decimal?      @db.Decimal(10, 2) @default(0)
  article             Article?      @relation(fields: [article_id], references: [id])
  bon_de_commande     BonDeCommande @relation(fields: [bon_de_commande_id], references: [id])
  category            Category      @relation(fields: [category_id], references: [id])

  @@index([article_id], map: "BonDeCommandeCategory_article_id_fkey")
  @@index([bon_de_commande_id], map: "BonDeCommandeCategory_bon_de_commande_id_fkey")
  @@index([category_id], map: "BonDeCommandeCategory_category_id_fkey")
}

model BonDeCommande {
  id          String                  @id @default(uuid())
  code        String                  @unique
  created_at  DateTime                @default(now())
  target_date DateTime                @default(now())
  description String
  status      String
  employee_id String
  employee    Employee                @relation(fields: [employee_id], references: [id])
  categories  BonDeCommandeCategory[]

  @@index([employee_id], map: "BonDeCommande_employee_id_fkey")
}

model Employee {
  id                 String                     @id @default(uuid())
  user_id            String                     @unique
  bons_de_commande   BonDeCommande[]
  user               User                       @relation(fields: [user_id], references: [id])
  gerant_assignments GerantEmployeeAssignment[]
}

model User {
  id                 String                     @id @default(uuid())
  username           String
  email              String                     @unique
  password           String
  role_id            String
  refreshToken       String?
  admin              Admin?
  employee           Employee?
  gerant_assignments GerantEmployeeAssignment[] @relation("GerantAssignments")
  role               Role                       @relation(fields: [role_id], references: [id])

  @@index([role_id], map: "User_role_id_fkey")
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[]
}

model Admin {
  id      String @id @default(uuid())
  user_id String @unique
  user    User   @relation(fields: [user_id], references: [id])
}

model GerantEmployeeAssignment {
  id          String   @id @default(uuid())
  gerant_id   String
  employee_id String
  created_at  DateTime @default(now())
  employee    Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  gerant      User     @relation("GerantAssignments", fields: [gerant_id], references: [id], onDelete: Cascade)

  @@unique([gerant_id, employee_id])
  @@index([employee_id], map: "GerantEmployeeAssignment_employee_id_fkey")
}
