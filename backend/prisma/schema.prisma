generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Article {
  id                  String    @id @default(uuid())
  name                String
  description         String?
  numero              Int?
  price               Decimal?  @db.Decimal(10, 2)
  collisage           String
  type                String    @default("catering") // "catering" or "sonodis"
  quantite_a_stocker  Int       @default(0)
  quantite_a_demander Int       @default(0)
  category_id         String
  category            Category  @relation(fields: [category_id], references: [id])
  bon_de_commande_categories BonDeCommandeCategory[]
  
}

model Category {
  id          String     @id @default(uuid())
  name        String
  description String?
  articles    Article[]
  commandes   BonDeCommandeCategory[]
}

model BonDeCommandeCategory {
  id               String         @id @default(uuid())
  category_id      String
  category         Category       @relation(fields: [category_id], references: [id])
  article_id       String?
  article          Article?       @relation(fields: [article_id], references: [id])
  bon_de_commande_id String
  bon_de_commande  BonDeCommande  @relation(fields: [bon_de_commande_id], references: [id])
  quantite_a_stocker Int          @default(0)
  quantite_a_demander Int         @default(0)
}

model BonDeCommande {
  id                  String                    @id @default(uuid())
  code                String                    @unique
  created_at          DateTime                 @default(now())
  target_date         DateTime                 @default(now()) // Date for which the bon de commande is created
  description         String
  status              String
  employee_id         String
  employee            Employee                 @relation(fields: [employee_id], references: [id])
  categories          BonDeCommandeCategory[]
}

model Employee {
  id               String           @id @default(uuid())
  user_id          String           @unique
  user             User             @relation(fields: [user_id], references: [id])
  bons_de_commande BonDeCommande[]
  
  // Add relation for Gerant assignments
  gerant_assignments GerantEmployeeAssignment[]
}

model User {
  id           String    @id @default(uuid())
  username     String
  email        String    @unique
  password     String
  role_id      String
  role         Role      @relation(fields: [role_id], references: [id])
  employee     Employee?  
  admin        Admin?
  refreshToken String?
  
  // Add relation for Gerant assignments
  gerant_assignments GerantEmployeeAssignment[] @relation("GerantAssignments")
}

model Role {
  id    String  @id @default(uuid())
  name  String  @unique
  users User[]
}

model Admin {
  id      String @id @default(uuid())
  user_id String @unique
  user    User   @relation(fields: [user_id], references: [id])
}

model GerantEmployeeAssignment {
  id          String   @id @default(uuid())
  gerant_id   String   // User ID of the Gerant
  employee_id String   // Employee ID that is assigned to the Gerant
  created_at  DateTime @default(now())
  
  // Relations
  gerant      User     @relation("GerantAssignments", fields: [gerant_id], references: [id], onDelete: Cascade)
  employee    Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  
  @@unique([gerant_id, employee_id])
}